

----STARTUP---- (31 October 2019 21:16:20) as /media/libre/linux64/CuisUniversity-3938.image!


----End fileIn of /media/libre/linux64/Libros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'car 10/31/2019 21:17:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /media/libre/linux64/Packages/TerseGuide.pck.st----!

test := Bag new.
test add: 1.
test add: 2.
test add: 1.
tests occurrencesOf: 1.
!

test := Bag new.
test add: 1.
test add: 2.
test add: 1.
test occurrencesOf: 1.
!

!classDefinition: #Cashier category: #TusLibros stamp: 'car 10/31/2019 21:32:07'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'car 10/31/2019 21:32:01'!
test01

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	
	self should: [aCashier checkoutWith: Cart new]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:33:14'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:33:18'!
with: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:33:54' prior: 50780593!
with: aCatalog

	^ self new  initializeWith: aCatalog 
	! !

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:33:56'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'car 10/31/2019 21:33:59'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'car 10/31/2019 21:33:59'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cashier methodsFor: 'initialization' stamp: 'car 10/31/2019 21:34:04' prior: 50780612!
initializeWith: aCatalog 
	catalog := aCatalog.! !

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:34:07'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:34:11'!
checkoutWith: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:34:34' prior: 50780625!
checkoutWith: aCart 
	
	^'Cannot do checkout from an empty cart'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:35:12' prior: 50780630!
checkoutWith: aCart 
	
	^ Cashier error: 'Cannot do checkout from an empty cart'.! !

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:35:14'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:35:17'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:35:17'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:35:55'!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	
	self should: [aCashier checkoutWith: Cart new]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:43:22' prior: 50780649!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	aCart := Cart acceptingItemsOf: (Array with: 'itemA').
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.
	
	aCashier checkoutWith: aCart.
	
	self assert: aCart isEmpty.  
	
	self assert: (aCashier didCheckoutWith: 10).  
	! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:43:31'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:43:49'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:45:24' prior: 50780636!
checkoutWith: aCart 
	
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].
	
	aCart getProducts: self.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:45:28'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:45:31'!
getProducts: aCashier 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:46:57' prior: 50780698!
getProducts: aCashier 
	
	items do: [
		:item | 
		aCashier seeProduct: item.
	]! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:47:03'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:47:08'!
seeProduct: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'car 10/31/2019 21:48:28'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog checkoutTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:48:21' prior: 50780712!
seeProduct: aProduct 
	
	| productValue |
	productValue = catalog at: aProduct.
	checkoutTotal := checkoutTotal + productValue.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:48:36'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:49:36' prior: 50780724!
seeProduct: aProduct 
	
	| productValue |	
	productValue = catalog at: aProduct ifAbsent: [].
	checkoutTotal := checkoutTotal + productValue.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:49:42'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:50:01'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:50:52' prior: 50780735!
seeProduct: aProduct 
	
	| productValue |	
	productValue := catalog at: aProduct ifAbsent: [].
	checkoutTotal := checkoutTotal + productValue.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:50:58' prior: 50780749!
seeProduct: aProduct 
	
	| productValue |	
	productValue := catalog at: aProduct.
	checkoutTotal := checkoutTotal + productValue.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:51:06'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:51:07'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:51:31' prior: 50780757!
seeProduct: aProduct 
	
	| productValue |	
	productValue := catalog at: aProduct ifAbsent: [0].
	checkoutTotal := checkoutTotal + productValue.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:51:36'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:51:36'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:52:30'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:53:07' prior: 50780688!
checkoutWith: aCart 
	
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].
	checkoutTotal  := 0.
	aCart getProducts: self.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:53:11'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:53:11'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:53:17'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:53:18'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:53:24'!
didCheckoutWith: aSmallInteger 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:53:45' prior: 50780809!
didCheckoutWith: aTotal 
	aTotal = checkoutTotal .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:53:46' prior: 50780814!
didCheckoutWith: aTotal 
	aTotal = checkoutTotal.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:53:56'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:53:56'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:54:10'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:55:02' prior: 50780703!
getProducts: aCashier 
	
	items do: [
		:item | 
		aCashier seeProduct: item.
	]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:55:50' prior: 50780834!
getProducts: aCashier 
	
	items do: [
		:item | 
		aCashier seeProduct: item.
		items remove: item.
	]! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:56:21'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:56:21'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:56:30'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:56:30'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:57:09' prior: 50780665!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	aCart := Cart acceptingItemsOf: (Array with: 'itemA').
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.
	
	aCashier checkoutWith: aCart.
	
	self assert: aCart isEmpty.  
	
	self assert: (aCashier didCheckoutWith) equals: 10.  
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:57:28'!
didCheckoutWith
	^ checkoutTotal.! !

!methodRemoval: Cashier #didCheckoutWith: stamp: 'car 10/31/2019 21:57:32'!
didCheckoutWith: aTotal 
	aTotal = checkoutTotal.!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:57:38'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:57:42'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 21:57:42'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:57:42'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:57:50'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:57:50'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:58:38'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:58:38'!
ERROR!

self isEmpty!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 21:59:45' prior: 50780576!
test01

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	
	self should: [aCashier checkoutWith: (Cart initializeAcceptingItemsOf: Array new)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:59:47'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 21:59:47'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'car 10/31/2019 22:00:31' prior: 50780904!
test01

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: Array new)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 22:00:34'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'car 10/31/2019 22:00:37'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 10/31/2019 22:00:37'!
PASSED!

----SNAPSHOT----(31 October 2019 22:00:41) CuisUniversity-3938.image priorSource: 14319118!

----SNAPSHOT----(31 October 2019 22:00:46) CuisUniversity-3938.image priorSource: 14377501!

----SNAPSHOT----(31 October 2019 22:01:30) CuisUniversity-3938.image priorSource: 14377594!

----SNAPSHOT----(31 October 2019 22:01:39) CuisUniversity-3938.image priorSource: 14377687!

----QUIT----(31 October 2019 22:01:41) CuisUniversity-3938.image priorSource: 14377780!

----STARTUP---- (4 November 2019 00:01:33) as /Users/nsoberon/Documents/Ingenieria 1/macos64/CuisUniversity-3938.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'ns 11/4/2019 00:03:03'!
test03CheckoutWithCartWithItemNotOnCatalog

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	aCart := Cart acceptingItemsOf: (Array with: 'itemC').
	
	aCart add: 'itemC'.
	
	aCashier checkoutWith: aCart.
	
	self deny: aCart isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ns 11/4/2019 00:04:03' prior: 50780966!
test03CheckoutWithCartWithItemNotOnCatalog

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	aCart := Cart acceptingItemsOf: (Array with: 'itemC').
	
	aCart add: 'itemC'.
	
	self should: [aCashier checkoutWith: aCart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout with an item not present on catalog'.
		self deny: aCart isEmpty.
	]
	
	! !

!testRun: #CashierTest #test03CheckoutWithCartWithItemNotOnCatalog stamp: 'ns 11/4/2019 00:04:16'!
FAILURE!

!testRun: #CashierTest #test03CheckoutWithCartWithItemNotOnCatalog stamp: 'ns 11/4/2019 00:04:16'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ns 11/4/2019 00:06:05' prior: 50780771!
seeProduct: aProduct 
	
	| productValue |
	productValue := catalog at: aProduct ifAbsent: [^ Cashier error: Cashier errorItemNotInCatalog].
	checkoutTotal := checkoutTotal + productValue.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ns 11/4/2019 00:06:30' prior: 50781007!
seeProduct: aProduct 
	
	| productValue |
	productValue := catalog at: aProduct ifAbsent: [^ Cashier error: 'Item not in Catalog'].
	checkoutTotal := checkoutTotal + productValue.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ns 11/4/2019 00:06:38' prior: 50780980!
test03CheckoutWithCartWithItemNotOnCatalog

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	aCart := Cart acceptingItemsOf: (Array with: 'itemC').
	
	aCart add: 'itemC'.
	
	self should: [aCashier checkoutWith: aCart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Item not in Catalog'.
		self deny: aCart isEmpty.
	]
	
	! !

!testRun: #CashierTest #test03CheckoutWithCartWithItemNotOnCatalog stamp: 'ns 11/4/2019 00:06:42'!
PASSED!

----SNAPSHOT----(4 November 2019 00:07:27) CuisUniversity-3938.image priorSource: 14377873!

----QUIT----(4 November 2019 00:07:30) CuisUniversity-3938.image priorSource: 14380666!

----STARTUP---- (4 November 2019 16:56:34) as /media/libre/linux64/CuisUniversity-3938.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 17:00:19'!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: Array new)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !

!methodRemoval: CashierTest #test01 stamp: 'car 11/4/2019 17:00:19'!
test01

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: Array new)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]!
!Cart methodsFor: 'initialization' stamp: 'car 11/4/2019 18:43:51' prior: 50777394!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Dictionary new.! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50781086!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'car 11/4/2019 18:45:06'!
getProductsTotalCost: aCashier 
	
	items do: [
		:item | 
		aCashier seeProduct: item.
		items remove: item.
	]! !

!methodRemoval: Cart #getProducts: stamp: 'car 11/4/2019 18:45:06'!
getProducts: aCashier 
	
	items do: [
		:item | 
		aCashier seeProduct: item.
		items remove: item.
	]!
!Cart methodsFor: 'queries' stamp: 'car 11/4/2019 18:45:42'!
getProductsTotalCost 
	
	items do: [
		:item | 
				

	]! !

!methodRemoval: Cart #getProductsTotalCost: stamp: 'car 11/4/2019 18:45:46'!
getProductsTotalCost: aCashier 
	
	items do: [
		:item | 
		aCashier seeProduct: item.
		items remove: item.
	]!
!Cart methodsFor: 'queries' stamp: 'car 11/4/2019 18:49:10' prior: 50781108!
getProductsTotalCost 
	
	^ items inject: 0 into: [
		:total :item | 
		catalog at: item ifAbsent: [^ Cashier error: 'Item not in Catalog'].
		total + catalog at: item.
	].! !

!methodRemoval: Cashier #seeProduct: stamp: 'car 11/4/2019 18:49:25'!
seeProduct: aProduct 
	
	| productValue |
	productValue := catalog at: aProduct ifAbsent: [^ Cashier error: 'Item not in Catalog'].
	checkoutTotal := checkoutTotal + productValue.!

!methodRemoval: Cashier #didCheckoutWith stamp: 'car 11/4/2019 18:49:29'!
didCheckoutWith
	^ checkoutTotal.!

Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'car 11/4/2019 18:49:35'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 18:50:02' prior: 50780788!
checkoutWith: aCart 
	
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].
	^ aCart getProductsTotalCost.! !

!methodRemoval: Cashier class #with: stamp: 'car 11/4/2019 18:50:59'!
with: aCatalog

	^ self new  initializeWith: aCatalog 
	!

!methodRemoval: Cashier #initializeWith: stamp: 'car 11/4/2019 18:51:07'!
initializeWith: aCatalog 
	catalog := aCatalog.!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 18:53:34' prior: 50781056!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := Cashier new.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 18:54:19' prior: 50780859!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart) equals: 10.  
	! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 18:54:34' prior: 50781180!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart) equals: 10.  
	
	self assert: aCart isEmpty.! !

!methodRemoval: CashierTest #test03CheckoutWithCartWithItemNotOnCatalog stamp: 'car 11/4/2019 18:54:53'!
test03CheckoutWithCartWithItemNotOnCatalog

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: aCatalogo.
	
	aCart := Cart acceptingItemsOf: (Array with: 'itemC').
	
	aCart add: 'itemC'.
	
	self should: [aCashier checkoutWith: aCart]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Item not in Catalog'.
		self deny: aCart isEmpty.
	]
	
	!
!Cart methodsFor: 'adding' stamp: 'car 11/4/2019 18:55:30'!
emptyCart

	items := OrderedCollection new.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 18:56:43' prior: 50781150!
checkoutWith: aCart 
	
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].
	aCart emptyCart.
	^ aCart getProductsTotalCost.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/4/2019 18:56:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/4/2019 18:56:46'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'car 11/4/2019 18:57:20' prior: 50777533!
defaultCatalog
	
	^ Dictionary with: self itemSellByTheStore! !

----SNAPSHOT----(4 November 2019 19:00:39) CuisUniversity-3938.image priorSource: 14380759!
!CartTest methodsFor: 'support' stamp: 'car 11/4/2019 19:01:05' prior: 50781265!
defaultCatalog
	| catalog |
	
	catalog := Dictionary new.
	
	^ catalog.! !
!CartTest methodsFor: 'support' stamp: 'car 11/4/2019 19:01:24' prior: 50781273!
defaultCatalog
	| catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->10; add: 'itemB'->3.
	^ catalog.! !
!CartTest methodsFor: 'support' stamp: 'car 11/4/2019 19:01:32' prior: 50781278!
defaultCatalog
	| catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->10;
	^ catalog.! !
!CartTest methodsFor: 'support' stamp: 'car 11/4/2019 19:01:34' prior: 50781285!
defaultCatalog
	| catalog |
	
	catalog := Dictionary new.
	catalog add: 'validBook'->10.
	^ catalog.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/4/2019 19:02:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/4/2019 19:02:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/4/2019 19:02:04'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/4/2019 19:02:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/4/2019 19:02:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/4/2019 19:02:04'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/4/2019 19:02:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/4/2019 19:02:04'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'car 11/4/2019 19:02:44' prior: 50777381!
assertIsValidItem: anItem

	catalog at: anItem ifAbsent: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/4/2019 19:02:49'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:02:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:02:56'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:02:56'!
FAILURE!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:03:07'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'car 11/4/2019 19:03:40' prior: 50781119!
getProductsTotalCost 
	
	^ items inject: 0 into: [
		:total :item | 
		catalog at: item ifAbsent: [^ Cashier error: 'Item not in Catalog'].
		total + (catalog at: item).
	].! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:03:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:03:44'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:03:44'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:03:49'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:04:46' prior: 50781231!
checkoutWith: aCart 
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	^ cartTotal.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:04:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:04:49'!
PASSED!

----SNAPSHOT----(4 November 2019 19:04:54) CuisUniversity-3938.image priorSource: 14387807!

----SNAPSHOT----(4 November 2019 19:04:56) CuisUniversity-3938.image priorSource: 14392073!

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:09:50'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:09:42'!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart aCreditCard |
	aCatalogo := Dictionary new.
	aCreditCard := CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpirationMonth: 11 andExpirationYear: 2019.
		
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:10:41' prior: 50781415!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart aCreditCard |
	aCatalogo := Dictionary new.
	aCreditCard := CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpirationMonth: 11 andExpirationYear: 2019.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: aCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:10:50'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:10:50'!
ERROR!
!CreditCard class methodsFor: 'nil' stamp: 'car 11/4/2019 19:11:48'!
withName: aName andNumber: aNumber andExpirationMonth: aMonth andExpirationYear: aYear

	^ self new initializeWithName: aName andNumber: aNumber andExpirationMonth: aMonth andExpirationYear: aYear.! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:12:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:12:35'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:12:36'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:12:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationMonth expirationYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'car 11/4/2019 19:12:32'!
initializeWithName: aName andNumber: aNumber andExpirationMonth: aMonth andExpirationYear: aYear.

	name := aName.
	number := aNumber.
	expirationMonth := aMonth.
	expirationYear := aYear.! !

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:12:45'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:12:45'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:13:00'!
checkoutWith: aCart and: aCreditCard
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	^ cartTotal.! !

!methodRemoval: Cashier #checkoutWith: stamp: 'car 11/4/2019 19:13:05'!
checkoutWith: aCart 
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	^ cartTotal.!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:13:16'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:13:45' prior: 50781434!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart aCreditCard |
	aCatalogo := Dictionary new.
	aCreditCard := self defaultCreditCard.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: aCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:13:58'!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpirationMonth: 11 andExpirationYear: 2019.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:14:16' prior: 50781533!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:14:25' prior: 50781165!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := Cashier new.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:14:31' prior: 50781194!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:14:34'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:14:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:14:34'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:15:21'!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:15:47' prior: 50781611!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: Date today) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:16:10' prior: 50781626!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := Date today.
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:16:17'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:16:29'!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	^ cartTotal.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:17:20' prior: 50781642!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := Date today.
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:17:22'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:18:48' prior: 50781662!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	^ cartTotal.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:19:07'!
isExpiredOn: aDate

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:20:28' prior: 50781708!
isExpiredOn: aDate

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:23:38' prior: 50781712!
isExpiredOn: aDate

	^ (expirationYear < aDate year) or: (expirationYear = aDate year and: expirationMonth < aDate month).		
	! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:24:26' prior: 50781672!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := Date newDay: 12 month: #December year: 2019.
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:24:40'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:24:40'!
ERROR!

|dateToCheck|
dateToCheck := Date newDay: 12 month: #December year: 2019.

dateToCheck year!

|dateToCheck|
dateToCheck := Date newDay: 12 month: #December year: 2019.

dateToCheck year asInteger!

|dateToCheck|
dateToCheck := Date newDay: 12 month: #December year: 2019.

dateToCheck month!

|dateToCheck|
dateToCheck := Date newDay: 12 month: #December year: 2019.

dateToCheck monthIndex!

Year!

|dateToCheck|
dateToCheck := Date newDay: 12 month: #December year: 2019.

dateToCheck yearNumber
!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:28:30' prior: 50781716!
isExpiredOn: aDate
	| dateYear dateMonth |
	dateYear := aDate yearNumber.
	dateMonth := aDate monthIndex.
	^ expirationYear < dateYear or: (expirationYear = dateYear and: expirationMonth < dateMonth).		
	! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:30:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationMonth expirationYear expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:30:50'!
initializeWithName: aName andNumber: aNumber andExpiration: aGregorianDate.

	name := aName.
	number := aNumber.
	expirationDate := aGregorianDate.	! !

!methodRemoval: CreditCard #initializeWithName:andNumber:andExpirationMonth:andExpirationYear: stamp: 'car 11/4/2019 19:30:58'!
initializeWithName: aName andNumber: aNumber andExpirationMonth: aMonth andExpirationYear: aYear.

	name := aName.
	number := aNumber.
	expirationMonth := aMonth.
	expirationYear := aYear.!

Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'car 11/4/2019 19:31:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

GregorianMonthOfYear!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:32:02' prior: 50781549!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567  ! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:33:29' prior: 50781815!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpirationDate: (GregorianMonthOfYear yearNumber: 2019 monthNumber: 11).! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:34:09'!
withName: aName andNumber: aNumber andExpirationDate: aGregorianDate

	^ self new initializeWithName: aName andNumber: aNumber andExpiration: aGregorianDate.! !

!methodRemoval: CreditCard class #withName:andNumber:andExpirationMonth:andExpirationYear: stamp: 'car 11/4/2019 19:34:13'!
withName: aName andNumber: aNumber andExpirationMonth: aMonth andExpirationYear: aYear

	^ self new initializeWithName: aName andNumber: aNumber andExpirationMonth: aMonth andExpirationYear: aYear.!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:34:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:34:20'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:34:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:34:20'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:34:20'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:34:34'!
withName: aName andNumber: aNumber andExpiration: aGregorianDate

	^ self new initializeWithName: aName andNumber: aNumber andExpiration: aGregorianDate.! !

!methodRemoval: CreditCard class #withName:andNumber:andExpirationDate: stamp: 'car 11/4/2019 19:34:34'!
withName: aName andNumber: aNumber andExpirationDate: aGregorianDate

	^ self new initializeWithName: aName andNumber: aNumber andExpiration: aGregorianDate.!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:35:02' prior: 50781821!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpiration: (GregorianMonthOfYear yearNumber: 2019 monthNumber: 11).! !

FixedGregorianDate!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:36:14' prior: 50781723!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate Date newDay: 12 month: #December year: 2019.
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:36:56' prior: 50781888!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #December year: 2019).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:37:00'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:37:00'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:37:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:37:00'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:37:00'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:38:31' prior: 50781766!
isExpiredOn: aDate
	| dateYear dateMonth |
	dateYear := aDate year.
	dateMonth := aDate monthOfYear.
	^ expirationDate year < dateYear or: (expirationDate year = dateYear and: expirationDate monthOfYear < dateMonth).		
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:38:34'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:38:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:38:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:38:34'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:38:34'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:39:13' prior: 50781946!
isExpiredOn: aDate
	| dateYear dateMonth |
	dateYear := aDate year.
	dateMonth := aDate monthOfYear.
	^ expirationDate year < dateYear or: (expirationDate year = dateYear and: expirationDate monthNumber < dateMonth).		
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:39:16'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:39:16'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:39:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:39:16'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:39:16'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:39:23' prior: 50781972!
isExpiredOn: aDate
	| dateYear dateMonth |
	dateYear := aDate year.
	dateMonth := aDate monthOfYear.
	^ expirationDate year < dateYear or: (expirationDate year = dateYear and: expirationDate month < dateMonth).		
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:39:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:39:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:39:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:39:29'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:39:29'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:39:45' prior: 50781998!
isExpiredOn: aDate
	| dateYear dateMonth |
	dateYear := aDate year.
	dateMonth := aDate month.
	^ expirationDate year < dateYear or: (expirationDate year = dateYear and: expirationDate month < dateMonth).		
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:39:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:39:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:39:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:39:48'!
PASSED!

----SNAPSHOT----(4 November 2019 19:39:53) CuisUniversity-3938.image priorSource: 14392166!

----SNAPSHOT----(4 November 2019 19:39:54) CuisUniversity-3938.image priorSource: 14412639!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/4/2019 19:39:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/4/2019 19:39:59'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:41:36'!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #September year: 2019).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: aCart ce
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:41:55' prior: 50782077!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #September year: 2019).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:42:19' prior: 50782093!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #September year: 2019).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard) equals: 10.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:42:57' prior: 50781879!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 4).! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:43:10' prior: 50781909!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #December year: 2021).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:43:33' prior: 50782112!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:43:40' prior: 50782160!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:44:00' prior: 50781571!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := Cashier new.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:44:13' prior: 50781587!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:44:16'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:44:16'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:44:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:44:16'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 19:44:16'!
PASSED!

!methodRemoval: Cashier #checkoutWith:and: stamp: 'car 11/4/2019 19:44:25'!
checkoutWith: aCart and: aCreditCard
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	^ cartTotal.!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:44:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:44:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:44:36'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:44:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 19:44:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:44:36'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:45:10' prior: 50781556!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 19:45:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 19:45:14'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 19:45:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 19:45:14'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 19:45:14'!
PASSED!

----SNAPSHOT----(4 November 2019 19:45:21) CuisUniversity-3938.image priorSource: 14412732!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:54:41'!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:55:00' prior: 50782308!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: OrderedCollection new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:55:52' prior: 50782325!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: OrderedCollection new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	aCashier sells includes: 13.
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:56:45' prior: 50782343!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: OrderedCollection new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	aCashier didSell: 13.
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:56:58' prior: 50782362!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: OrderedCollection new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 19:57:02' prior: 50782381!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := Cashier with: OrderedCollection new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 19:57:25'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'car 11/4/2019 19:58:13'!
with: aSellsBook

	^ self new initializeWith: aSellsBook! !

!classDefinition: #Cashier category: #TusLibros stamp: 'car 11/4/2019 19:58:32'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog sellsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:58:30'!
initializeWith: aSellsBook

	sellsBook := aSellsBook.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:58:54'!
didSell: aSale

	^ sellsBook includes: aSale! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:59:04' prior: 50782440!
didSell: aSale

	^ sellsBook includes: aSale! !

!classDefinition: #Cashier category: #TusLibros stamp: 'car 11/4/2019 19:59:11'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:59:11' prior: 50782435!
initializeWith: aSellsBook

	salesBook := aSellsBook.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:59:11' prior: 50782445!
didSell: aSale

	^ salesBook includes: aSale! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 19:59:24' prior: 50782457!
initializeWith: aSalesBook

	salesBook := aSalesBook.! !
!Cashier class methodsFor: 'instance creation' stamp: 'car 11/4/2019 19:59:32' prior: 50782423!
with: aSalesBook

	^ self new initializeWith: aSalesBook! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:00:15' prior: 50781695!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:00:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 20:00:21'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 20:00:21'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 20:00:21'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 20:00:21'!
ERROR!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 20:00:21'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:00:51'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:09' prior: 50782194!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashier.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
		self assert: anError messageText equals: 'Cannot do checkout from an empty cart'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:23'!
defaultCashier
	
	^ Cashier with: OrderedCollection new.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:35' prior: 50782212!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:40' prior: 50782273!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:47' prior: 50782139!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #December year: 2021).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:51' prior: 50782177!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:01:55' prior: 50782400!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:01:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 20:01:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 20:01:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 20:01:59'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 20:01:59'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 20:01:59'!
PASSED!

----SNAPSHOT----(4 November 2019 20:02:03) CuisUniversity-3938.image priorSource: 14420946!

----SNAPSHOT----(4 November 2019 20:02:05) CuisUniversity-3938.image priorSource: 14431901!

!classDefinition: #MerchantProcessorMock category: #TusLibros stamp: 'car 11/4/2019 20:08:54'!
Object subclass: #MerchantProcessorMock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:08:50'!
test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor

	| aCashier aCatalogo aCart aMerchantProcessor |
	aCatalogo := Dictionary new.
	aMerchantProcessor := MerchantProcessorMock new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:09:34' prior: 50782531!
defaultCashier
	| aMerchantProcessor |
	aMerchantProcessor := MerchantProcessorMock new.
	^ Cashier with: OrderedCollection new using: aMerchantProcessor.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:09:43' prior: 50782661!
test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:10:27' prior: 50782514!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashier.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self assert: (aCashier didSell: 0).
		]! !

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor stamp: 'car 11/4/2019 20:14:03'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'car 11/4/2019 20:14:30'!
with: aSalesBook using: aMerchantProcessor

	^ self new initializeWith: aSalesBook using: aMerchantProcessor.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'car 11/4/2019 20:14:50'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:14:48'!
initializeWith: aSalesBook using: aMerchantProcessor

	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:17:14' prior: 50782477!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal transactionResult |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	transactionResult := merchantProcessor debitAmount: cartTotal creditCardNumber: aCreditCard number creditCardExpiration: aCreditCard expiration creditCardOwner: aCreditCard name.
	
	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:17:35'!
name

	^ name
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:17:51'!
expiration

	^ expirationDate
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:18:02'!
number

	^ number
	! !

!classDefinition: #MerchantProcessorMock category: #TusLibros stamp: 'car 11/4/2019 20:19:36'!
Object subclass: #MerchantProcessorMock
	instanceVariableNames: 'responseType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorMock methodsFor: 'nil' stamp: 'car 11/4/2019 20:19:34'!
debitAmount: aTotal creditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName

	responseType = 0 ifTrue: [
		^ '0|OK'.	
	]
! !
!MerchantProcessorMock class methodsFor: 'nil' stamp: 'car 11/4/2019 20:20:24'!
withType: aType andError: anErrorMessage
	
	^ self new initializeWithType: aType andError: anErrorMessage.! !
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:20:37'!
initializeWithType: aType andError: anErrorMessage

	! !

!classDefinition: #MerchantProcessorMock category: #TusLibros stamp: 'car 11/4/2019 20:20:56'!
Object subclass: #MerchantProcessorMock
	instanceVariableNames: 'responseType responseErrorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:20:54' prior: 50782807!
initializeWithType: aType andError: anErrorMessage

	responseType := aType.
	responseErrorMessage := anErrorMessage.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:21:58' prior: 50782682!
defaultCashier
	| anOkStatusMerchantProcessor |
	anOkStatusMerchantProcessor := MerchantProcessorMock withType: 0 andError: ''.
	
	^ Cashier with: OrderedCollection new using: anOkStatusMerchantProcessor.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:22:00' prior: 50782828!
defaultCashier
	| anOkStatusMerchantProcessor |
	
	anOkStatusMerchantProcessor := MerchantProcessorMock withType: 0 andError: ''.
	^ Cashier with: OrderedCollection new using: anOkStatusMerchantProcessor.! !

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor stamp: 'car 11/4/2019 20:22:11'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:23:18' prior: 50782753!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal transactionResult |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	transactionResult := merchantProcessor debitAmount: cartTotal creditCardNumber: aCreditCard number creditCardExpiration: aCreditCard expiration creditCardOwner: aCreditCard name.

	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:27:01'!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:29:11'!
defaultMerchantProcessorWithType: aType andStatus: aStatus andError: anError	
	
	^ MerchantProcessorMock withType: aType andStatus: aStatus andError: anError	! !
!MerchantProcessorMock class methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:29:39'!
withType: aType andStatus: aStatus andError: anError	
	
	^ self new initializeWithType: aType andStatus: aStatus andError: anError.! !

!methodRemoval: MerchantProcessorMock class #withType:andError: stamp: 'car 11/4/2019 20:29:51'!
withType: aType andError: anErrorMessage
	
	^ self new initializeWithType: aType andError: anErrorMessage.!

!classDefinition: #MerchantProcessorMock category: #TusLibros stamp: 'car 11/4/2019 20:30:22'!
Object subclass: #MerchantProcessorMock
	instanceVariableNames: 'responseType responseErrorMessage responseStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:30:21'!
initializeWithType: aType andStatus: aStatus andError: anError.

	responseType := aType.
	responseStatus := aStatus.
	responseErrorMessage := anError.! !

!methodRemoval: MerchantProcessorMock #initializeWithType:andError: stamp: 'car 11/4/2019 20:30:26'!
initializeWithType: aType andError: anErrorMessage

	responseType := aType.
	responseErrorMessage := anErrorMessage.!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:31:07' prior: 50782838!
defaultCashier
	| anOkStatusMerchantProcessor |
	
	anOkStatusMerchantProcessor := self defaultMerchantProcessorWithType: 200 andStatus: 0 andError: ''.	
	
	^ Cashier with: OrderedCollection new using: anOkStatusMerchantProcessor.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:32:12'!
defaultCashierWithMerchantProcessorWithError
	| aMerchantProcessorWithError |
	
	aMerchantProcessorWithError := self defaultMerchantProcessorWithType: 400 andStatus: 0 andError: ''.	
	
	^ Cashier with: OrderedCollection new using: aMerchantProcessorWithError.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:32:35' prior: 50782871!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:32:59' prior: 50782958!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:33:06'!
ERROR!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:33:06'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:33:24'!
defaultCreditCardWithLongName
	
	^ CreditCard withName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' andNumber: 1234567891234567 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 4).! !

----SNAPSHOT----(4 November 2019 20:33:36) CuisUniversity-3938.image priorSource: 14431994!

----SNAPSHOT----(4 November 2019 20:33:37) CuisUniversity-3938.image priorSource: 14443679!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:36:01' prior: 50782978!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:36:15'!
FAILURE!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:36:15'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:37:00' prior: 50782852!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal transactionResult |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	transactionResult := merchantProcessor debitAmount: cartTotal creditCardNumber: aCreditCard number creditCardExpiration: aCreditCard expiration creditCardOwner: aCreditCard name.
	
	transactionResult type = 400 ifTrue: [^ 'Invalid Parameter'].

	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !

!classDefinition: #TransactionResponse category: #TusLibros stamp: 'car 11/4/2019 20:39:20'!
Object subclass: #TransactionResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:39:30' prior: 50782792!
debitAmount: aTotal creditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName
	
	"^ TransactionResponse withType: type andStatus: status andError: error."
! !
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:39:59' prior: 50783086!
debitAmount: aTotal creditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName
	
	^ TransactionResponse withType: responseType andStatus: responseStatus andError: responseErrorMessage.
! !
!TransactionResponse class methodsFor: 'nil' stamp: 'car 11/4/2019 20:40:36'!
withType: responseType andStatus: responseStatus andError: responseErrorMessage.

	^ self new initializeWithType: responseType andStatus: responseStatus andError: responseErrorMessage.! !

!classDefinition: #TransactionResponse category: #TusLibros stamp: 'car 11/4/2019 20:41:34'!
Object subclass: #TransactionResponse
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TransactionResponse category: #TusLibros stamp: 'car 11/4/2019 20:41:35'!
Object subclass: #TransactionResponse
	instanceVariableNames: 'type status'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TransactionResponse category: #TusLibros stamp: 'car 11/4/2019 20:41:35'!
Object subclass: #TransactionResponse
	instanceVariableNames: 'type status error'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TransactionResponse methodsFor: 'nil' stamp: 'car 11/4/2019 20:41:32'!
initializeWithType: responseType andStatus: responseStatus andError: responseErrorMessage.

	type := responseType.	
	status := responseStatus.
	error := responseErrorMessage .! !
!TransactionResponse methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:41:54'!
type

	^ type! !

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:42:02'!
FAILURE!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:42:02'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:42:24' prior: 50783056!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal transactionResult |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	transactionResult := merchantProcessor debitAmount: cartTotal creditCardNumber: aCreditCard number creditCardExpiration: aCreditCard expiration creditCardOwner: aCreditCard name.
	
	transactionResult type = 400 ifTrue: [^ Cashier error: 'Invalid Parameter'].

	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:42:31'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:42:34'!
FAILURE!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:42:34'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:42:34'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:43:02' prior: 50782709!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashier.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self deny: (aCashier didSell: 0).
		]! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor stamp: 'car 11/4/2019 20:43:05'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:43:05'!
PASSED!

----SNAPSHOT----(4 November 2019 20:43:08) CuisUniversity-3938.image priorSource: 14443772!

----SNAPSHOT----(4 November 2019 20:43:10) CuisUniversity-3938.image priorSource: 14451642!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:44:18'!
test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:45:00' prior: 50783270!
test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->1111111111111111; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:45:19' prior: 50783295!
test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->1111111111111111; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 1111111111111114).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor stamp: 'car 11/4/2019 20:45:23'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:47:44'!
test10CheckoutWithValidCreditCardWithoutAmount

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->1111111111111111; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithoutErrorAndStatus1.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 1111111111111114).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:47:48' prior: 50783350!
test10CheckoutWithValidCreditCardWithoutAmount

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->1111111111111111; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 1111111111111114).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:48:30' prior: 50783375!
test10CheckoutWithValidCreditCardWithoutAmount

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->12,00; add: 'itemB'->3,12.

	aCashier := self defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 1111111111111114).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:49:04' prior: 50783400!
test10CheckoutWithValidCreditCardWithoutAmount

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->12,00; add: 'itemB'->3,12.

	aCashier := self defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card Insufficient Balance'.
			self deny: (aCashier didSell: 15,12).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test10CheckoutWithValidCreditCardWithoutAmount stamp: 'car 11/4/2019 20:49:09'!
ERROR!

!testRun: #CashierTest #test10CheckoutWithValidCreditCardWithoutAmount stamp: 'car 11/4/2019 20:49:09'!
ERROR!

0,12!

0.12!

(0.12) + 1!

0.12 + 1!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:50:08' prior: 50783425!
test10CheckoutWithValidCreditCardWithoutAmount

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->(12.00); add: 'itemB'->(3.12).

	aCashier := self defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card Insufficient Balance'.
			self deny: (aCashier didSell: 15.12).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test10CheckoutWithValidCreditCardWithoutAmount stamp: 'car 11/4/2019 20:50:11'!
ERROR!

!testRun: #CashierTest #test10CheckoutWithValidCreditCardWithoutAmount stamp: 'car 11/4/2019 20:50:11'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 20:50:34'!
defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne
	| aMerchantProcessorWithError |
	
	aMerchantProcessorWithError := self defaultMerchantProcessorWithType: 200 andStatus: 1 andError: 'Credit Card Insufficient Balance'.
	
	^ Cashier with: OrderedCollection new using: aMerchantProcessorWithError.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:51:24' prior: 50783159!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal transactionResult |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	transactionResult := merchantProcessor debitAmount: cartTotal creditCardNumber: aCreditCard number creditCardExpiration: aCreditCard expiration creditCardOwner: aCreditCard name.
	
	transactionResult type = 400 ifTrue: [^ Cashier error: 'Invalid Parameter'].
	transactionResult status = 1 ifTrue:  [^ Cashier error: transactionResult error].
	
	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !
!TransactionResponse methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:51:33'!
status

	^ status! !
!TransactionResponse methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 20:51:37'!
error

	^ error! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor stamp: 'car 11/4/2019 20:52:10'!
PASSED!

!testRun: #CashierTest #test10CheckoutWithValidCreditCardWithoutAmount stamp: 'car 11/4/2019 20:52:10'!
PASSED!

----SNAPSHOT----(4 November 2019 20:52:14) CuisUniversity-3938.image priorSource: 14451735!

----SNAPSHOT----(4 November 2019 20:52:15) CuisUniversity-3938.image priorSource: 14461485!

----SNAPSHOT----(4 November 2019 20:53:09) CuisUniversity-3938.image priorSource: 14461578!
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 21:05:23' prior: 50783096!
debitAmount: aTotal creditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName
	
	^ TransactionResponse withType: responseType andStatus: responseStatus andError: responseErrorMessage.
! !
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 21:09:40' prior: 50783582!
debitAmount: aTotal creditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName
	
	^ TransactionResponse withType: responseType andStatus: responseStatus andError: responseErrorMessage.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:30:30'!
debitWith: anAction
	
	anAction value.! !

!methodRemoval: CashierTest #test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor stamp: 'car 11/4/2019 21:31:00'!
test09CheckoutWithValidCreditCardWithInvalidTransactionAmountForMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->1111111111111111; add: 'itemB'->3.

	aCashier := self defaultCashierWithMerchantProcessorWithError.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 1111111111111114).
			self deny: aCart isEmpty.
		].
	
	
	
!

!methodRemoval: CashierTest #test10CheckoutWithValidCreditCardWithoutAmount stamp: 'car 11/4/2019 21:31:03'!
test10CheckoutWithValidCreditCardWithoutAmount

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->(12.00); add: 'itemB'->(3.12).

	aCashier := self defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card Insufficient Balance'.
			self deny: (aCashier didSell: 15.12).
			self deny: aCart isEmpty.
		].
	
	
	
!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:31:40' prior: 50782937!
defaultCashier		
	
	^ Cashier with: OrderedCollection new using: self.! !

!methodRemoval: CashierTest #defaultCashierWithMerchantProcessorWithError stamp: 'car 11/4/2019 21:31:44'!
defaultCashierWithMerchantProcessorWithError
	| aMerchantProcessorWithError |
	
	aMerchantProcessorWithError := self defaultMerchantProcessorWithType: 400 andStatus: 0 andError: ''.	
	
	^ Cashier with: OrderedCollection new using: aMerchantProcessorWithError.!

!methodRemoval: CashierTest #defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne stamp: 'car 11/4/2019 21:31:46'!
defaultCashierWithMerchantProcessorWithoutErrorAndStatusOne
	| aMerchantProcessorWithError |
	
	aMerchantProcessorWithError := self defaultMerchantProcessorWithType: 200 andStatus: 1 andError: 'Credit Card Insufficient Balance'.
	
	^ Cashier with: OrderedCollection new using: aMerchantProcessorWithError.!

!methodRemoval: CashierTest #defaultCreditCardWithLongName stamp: 'car 11/4/2019 21:31:50'!
defaultCreditCardWithLongName
	
	^ CreditCard withName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' andNumber: 1234567891234567 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 4).!

!methodRemoval: CashierTest #defaultMerchantProcessorWithType:andStatus:andError: stamp: 'car 11/4/2019 21:31:53'!
defaultMerchantProcessorWithType: aType andStatus: aStatus andError: anError	
	
	^ MerchantProcessorMock withType: aType andStatus: aStatus andError: anError	!
!MerchantProcessorMock methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 21:32:13' prior: 50783593!
debitAmount: aTotal creditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName
	
	
! !

!classRemoval: #TransactionResponse stamp: 'car 11/4/2019 21:32:15'!
Object subclass: #TransactionResponse
	instanceVariableNames: 'type status error'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:32:52'!
test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !

!methodRemoval: CashierTest #test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor stamp: 'car 11/4/2019 21:32:52'!
test07CheckoutWithValidCreditCardWithConfirmationFromMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
!

!classDefinition: #CashierTest category: #TusLibros stamp: 'car 11/4/2019 21:33:32'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'hasDebit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:33:31' prior: 50783721!
test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit equals: true! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:33:38' prior: 50783767!
test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:34:18' prior: 50783787!
test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	self debitWith: [hasDebit := true].

	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit! !

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:34:26'!
ERROR!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:34:26'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 21:34:48' prior: 50783503!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal transactionResult |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	transactionResult := merchantProcessor debit.
	
	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'car 11/4/2019 21:34:59' prior: 50783836!
checkoutWith: aCart and: aCreditCard on: aDate
	
	| cartTotal |
	(aCart isEmpty ) ifTrue: [Cashier error: 'Cannot do checkout from an empty cart'].	
	(aCreditCard isExpiredOn: aDate ) ifTrue: [Cashier error: 'Credit Card is expired'].	
	cartTotal := aCart getProductsTotalCost.
	
	merchantProcessor debit.
	
	aCart emptyCart.
	salesBook add: cartTotal.
	^ cartTotal.! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'car 11/4/2019 21:35:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'hasDebit action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:35:41'!
debit
	
	action value! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:35:53' prior: 50783602!
debitWith: anAction
	
	action := anAction! !

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:36:30'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:36:35'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 21:36:35'!
ERROR!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 21:36:35'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:37:40' prior: 50783022!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	
	self debitWith: [self class error: 'Error'].
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCardWithLongName on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:37:45' prior: 50783918!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	
	self debitWith: [self class error: 'Error'].
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Invalid Parameter'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:37:54' prior: 50783943!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	
	self debitWith: [self class error: 'Error'].
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Error'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 21:37:59'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 21:38:02'!
PASSED!

!classRemoval: #MerchantProcessorMock stamp: 'car 11/4/2019 21:38:08'!
Object subclass: #MerchantProcessorMock
	instanceVariableNames: 'responseType responseErrorMessage responseStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/4/2019 21:38:11'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:38:15'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 21:38:15'!
PASSED!

----SNAPSHOT----(4 November 2019 21:38:17) CuisUniversity-3938.image priorSource: 14461671!

----SNAPSHOT----(4 November 2019 21:38:19) CuisUniversity-3938.image priorSource: 14477961!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:38:49'!
test08CheckoutWithErrorFromMerchantProcessor

	| aCashier aCatalogo aCart |
	
	self debitWith: [self class error: 'Error'].
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Error'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!methodRemoval: CashierTest #test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor stamp: 'car 11/4/2019 21:38:49'!
test08CheckoutWithValidCreditCardWithInvalidCardOwnerForMerchantProcessor

	| aCashier aCatalogo aCart |
	
	self debitWith: [self class error: 'Error'].
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier .
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Error'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
!
!CashierTest methodsFor: 'test' stamp: 'car 11/4/2019 21:39:08'!
test07CheckoutWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	self debitWith: [hasDebit := true].

	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit! !

!methodRemoval: CashierTest #test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:39:08'!
test07CheckoutWithValidCreditCardWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	self debitWith: [hasDebit := true].

	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashier.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit!

----SNAPSHOT----(4 November 2019 21:39:13) CuisUniversity-3938.image priorSource: 14478054!

----SNAPSHOT----(4 November 2019 21:39:15) CuisUniversity-3938.image priorSource: 14481044!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/4/2019 21:39:18'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/4/2019 21:39:18'!
PASSED!

----SNAPSHOT----(4 November 2019 21:39:45) CuisUniversity-3938.image priorSource: 14481137!

----SNAPSHOT----(4 November 2019 21:40:05) CuisUniversity-3938.image priorSource: 14482090!

----STARTUP---- (7 November 2019 17:09:32) as /media/libre/linux64/CuisUniversity-3938.image!


TestCase subclass: #RestInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: #TusLibros stamp: 'car 11/7/2019 19:12:14'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterface category: #TusLibros stamp: 'car 11/7/2019 19:25:35'!
Object subclass: #RestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'nil' stamp: 'car 11/7/2019 19:25:29'!
test01ListEmptyCart

| aCartID aRestInterface |
aRestInterface := RestInterface new.

aCartID := aRestInterface createCart.

self assert: (aRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:26:56' prior: 50784243!
test01ListEmptyCart

| aCartID aRestInterface |
aRestInterface := RestInterfaceInternalPart new.

aCartID := aRestInterface createCart.

self assert: (aRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:27:01' prior: 50784253!
test01ListEmptyCart

| aCartID aRestInterface |
aRestInterface := RestInterfaceInternalPart new.

aCartID := aRestInterface createCart.

self assert: (aRestInterface listCart: aCartID) size equals: 0! !

!classDefinition: 'RestInterfaceInternalPart class' category: #TusLibros stamp: 'car 11/7/2019 19:29:39'!
RestInterfaceInternalPart class
	instanceVariableNames: 'cartNumber'!
!RestInterfaceInternalPart class methodsFor: 'nil' stamp: 'car 11/7/2019 19:29:37'!
initialize

	cartNumber := 0.! !

!classDefinition: 'RestInterfaceInternalPart class' category: #TusLibros stamp: 'car 11/7/2019 19:32:12'!
RestInterfaceInternalPart class
	instanceVariableNames: 'cartNumber cartDB'!
!RestInterfaceInternalPart class methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:32:11' prior: 50784278!
initialize

	cartNumber := 0.
	cartDB := Dictionary new.! !

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/7/2019 19:32:58'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/7/2019 19:32:59'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'no messages' stamp: 'car 11/7/2019 19:32:56'!
initialize

	cartNumber := 0.
	cartDB := Dictionary new.! !
!RestInterfaceInternalPart class methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:33:49' prior: 50784289!
initialize

	^ self new initializeInterface.! !
!RestInterfaceInternalPart class methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:33:59'!
initializeInterface

	^ self new initializeInterface.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:33:59'!
initializeInterface

	cartNumber := 0.
	cartDB := Dictionary new.! !

!methodRemoval: RestInterfaceInternalPart class #initialize stamp: 'car 11/7/2019 19:33:59'!
initialize

	^ self new initializeInterface.!

!methodRemoval: RestInterfaceInternalPart #initialize stamp: 'car 11/7/2019 19:33:59'!
initialize

	cartNumber := 0.
	cartDB := Dictionary new.!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:35:02'!
cartNumber

	^cartNumber.! !

|aRestInterface|
aRestInterface := RestInterfaceInternalPart new.

aRestInterface cartNumber!
!RestInterfaceInternalPart class methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:36:01'!
initialize

	^ self new initializeInterface.! !

!methodRemoval: RestInterfaceInternalPart class #initializeInterface stamp: 'car 11/7/2019 19:36:06'!
initializeInterface

	^ self new initializeInterface.!

|aRestInterface|
aRestInterface := RestInterfaceInternalPart new.

aRestInterface cartNumber!

|aRestInterface|
aRestInterface := RestInterfaceInternalPart new.

aRestInterface cartNumber!
!RestInterfaceInternalPart class methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:37:04'!
createInterface

	^ self new initializeInterface.! !

!methodRemoval: RestInterfaceInternalPart class #initialize stamp: 'car 11/7/2019 19:37:04'!
initialize

	^ self new initializeInterface.!

|aRestInterface|
aRestInterface := RestInterfaceInternalPart new.

aRestInterface cartNumber !

|aRestInterface|
aRestInterface := RestInterfaceInternalPart createInterface .

aRestInterface cartNumber !

!methodRemoval: RestInterfaceInternalPart #cartNumber stamp: 'car 11/7/2019 19:37:40'!
cartNumber

	^cartNumber.!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:37:52' prior: 50784263!
test01ListEmptyCart

| aCartID aRestInterface |
aRestInterface := RestInterfaceInternalPart createInterface.

aCartID := aRestInterface createCart.

self assert: (aRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:38:45'!
createCart

	cartDB put: Cart
	
	^ cartNumber.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:39:41' prior: 50784394!
createCart

	cartDB at: cartNumber put: (Cart acceptingItemsOf: Dictionary new).
	
	^ cartNumber.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:41:32'!
listCart: aCartId

	^ cartDB at: aCartId ifAbsent: [].! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:42:13' prior: 50784406!
listCart: aCartId
	| aCart |
	aCart := cartDB at: aCartId ifAbsent: [].
	^ aCart products.! !
!Cart methodsFor: 'queries' stamp: 'car 11/7/2019 19:42:29'!
products 
	
	^ items.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 19:42:36'!
PASSED!

----SNAPSHOT----(7 November 2019 19:42:40) CuisUniversity-3938.image priorSource: 14482183!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:47:10'!
test01ListCartWithOneItem

| aCartID aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

aCartID := aRestInterface createCart.

aRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self assert: (aRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:49:10' prior: 50784399!
createCart

	cartDB at: cartNumber put: (Cart acceptingItemsOf: (Dictionary new add: 'Valid Item'->4)).
	
	^ cartNumber.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:51:08'!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	aCart := cartDB at: aCartID ifAbsent:[].
	
	aCart ! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:51:39' prior: 50784447!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	aCart := cartDB at: aCartID ifAbsent:[].
	
	aCart add: aQuantity of: anItem! !

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:51:55'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:52:29' prior: 50784455!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	aCart := cartDB at: aCartID ifAbsent: [].
	
	aCart add: aQuantity of: anItem! !

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:52:34'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 19:52:34'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:52:34'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:53:05'!
ERROR!

Dictionary new add: 'Valid Item'->4!

Dictionary new add: 'Valid Item'->4!

Dictionary add: 'Valid Item'->4!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:54:43' prior: 50784440!
createCart
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid Item'->10.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	
	^ cartNumber.! !

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:54:46'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 19:54:46'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:54:46'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 19:55:02' prior: 50784492!
createCart
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid item'->10.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	
	^ cartNumber.! !

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 19:55:06'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 19:55:06'!
PASSED!

----SNAPSHOT----(7 November 2019 19:55:10) CuisUniversity-3938.image priorSource: 14488736!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:00:16'!
test03ListInvalidCart

| aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

self should: [aRestInterface listCart: 80 ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:01:24' prior: 50784412!
listCart: aCartId
	| aCart |
	aCart := cartDB at: aCartId ifAbsent: [^ RestInterfaceInternalPart error: 'cart ID is invalid'].
	^ aCart products.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:01:28' prior: 50784542!
listCart: aCartId
	| aCart |
	aCart := cartDB at: aCartId ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	^ aCart products.! !

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:01:34'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 20:01:41'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:01:41'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:01:41'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:01:52'!
test02ListCartWithOneItem

| aCartID aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

aCartID := aRestInterface createCart.

aRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self assert: (aRestInterface listCart: aCartID) size equals: 1! !

!methodRemoval: RestInterfaceInternalPartTest #test01ListCartWithOneItem stamp: 'car 11/7/2019 20:01:52'!
test01ListCartWithOneItem

| aCartID aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

aCartID := aRestInterface createCart.

aRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self assert: (aRestInterface listCart: aCartID) size equals: 1!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:03:22'!
test04ExpiredCart

| aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

self should: [aRestInterface listCart: 80 ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:21:56'!
test04ListExpiredCart

| aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

self should: [aRestInterface listCart: 80 ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !

!methodRemoval: RestInterfaceInternalPartTest #test04ExpiredCart stamp: 'car 11/7/2019 20:21:56'!
test04ExpiredCart

| aRestInterface |

aRestInterface := RestInterfaceInternalPart createInterface.

self should: [aRestInterface listCart: 80 ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

!

!classDefinition: #MockClock category: #TusLibros stamp: 'car 11/7/2019 20:25:25'!
Object subclass: #MockClock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:25:17' prior: 50784673!
test04ListExpiredCart

| aRestInterface aCartID aMockClock |

aMockClock := MockClock create.

aRestInterface := RestInterfaceInternalPart createInterfaceWith: aMockClock.

aCartID := aRestInterface createCart.

aMockClock addMinutes: 31.

self should: [aRestInterface listCart: aCartID ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!MockClock class methodsFor: 'nil' stamp: 'car 11/7/2019 20:26:08'!
create

	^ self new initialize ! !

!classDefinition: #MockClock category: #TusLibros stamp: 'car 11/7/2019 20:26:29'!
Object subclass: #MockClock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockClock methodsFor: 'no messages' stamp: 'car 11/7/2019 20:26:28'!
initialize

	time := 0.! !
!MockClock methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:27:05'!
addMinutes: aQuantity

	time := time + aQuantity ! !
!MockClock methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:27:22'!
getTime

	^time ! !
!RestInterfaceInternalPart class methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:27:58'!
createInterfaceWith: aClock

	^ self new initializeInterfaceWith: aClock.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:28:32'!
 initializeInterfaceWith: aClock.

	! !

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/7/2019 20:29:04'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:29:02' prior: 50784750!
initializeInterfaceWith: aClock.

	self initializeInterface .
	clock := aClock ! !

|a |
a := Association new.
!

|a |
a := 'a' -> 1

!

a key!

|a |
a := 'a' -> 1

a key!

Association!

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/7/2019 20:35:52'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB clock cartClocks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:35:51' prior: 50784763!
initializeInterfaceWith: aClock.

	self initializeInterface .
	clock := aClock .
	cartClocks := Dictionary new.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:36:38' prior: 50784511!
createCart
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid item'->10.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:37:44'!
setUp

| aRestInterface aMockClock |

aMockClock := MockClock create.

aRestInterface := RestInterfaceInternalPart createInterfaceWith: aMockClock.! !

!classDefinition: #RestInterfaceInternalPartTest category: #TusLibros stamp: 'car 11/7/2019 20:38:46'!
TestCase subclass: #RestInterfaceInternalPartTest
	instanceVariableNames: 'testRestInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:38:44' prior: 50784799!
setUp

| aMockClock |

aMockClock := MockClock create.

testRestInterface := RestInterfaceInternalPart createInterfaceWith: aMockClock.! !

!classDefinition: #RestInterfaceInternalPartTest category: #TusLibros stamp: 'car 11/7/2019 20:38:58'!
TestCase subclass: #RestInterfaceInternalPartTest
	instanceVariableNames: 'testRestInterface mockClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:39:04' prior: 50784816!
setUp



mockClock := MockClock create.

testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:39:08' prior: 50784833!
setUp

mockClock := MockClock create.

testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:39:47' prior: 50784384!
test01ListEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

self assert: (testRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:40:01' prior: 50784635!
test02ListCartWithOneItem

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self assert: (testRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:40:10' prior: 50784529!
test03ListInvalidCart


self should: [testRestInterface listCart: 80 ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:40:27' prior: 50784705!
test04ListExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 31.

self should: [testRestInterface listCart: aCartID ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:40:32'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 20:40:37'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:40:41'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:40:44'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:40:44'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:43:36' prior: 50784551!
listCart: aCartId
	| aCart now aCartTime |
	now := clock getTime.
	aCartTime := cartClocks at: aCartId ifAbsent:  [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	now - aCartTime > 30 ifTrue: [
		cartDB remove: aCartId.
		cartClocks remove: aCartId.
	].
	aCart := cartDB at: aCartId ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	^ aCart products.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:43:45'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 20:43:45'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:43:45'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:43:45'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:43:45'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:44:02'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:44:05'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:44:25'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:44:25'!
FAILURE!

self getTime!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:45:37'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:45:59' prior: 50784910!
listCart: aCartId
	| aCart now aCartTime |
	now := clock getTime.
	aCartTime := cartClocks at: aCartId ifAbsent:  [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	now - aCartTime > 30 ifTrue: [
		cartDB removeKey: aCartId.
		cartClocks removeKey: aCartId.
	].
	aCart := cartDB at: aCartId ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	^ aCart products.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:46:02'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 20:46:02'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:46:02'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:46:02'!
PASSED!

----SNAPSHOT----(7 November 2019 20:46:06) CuisUniversity-3938.image priorSource: 14491996!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:46:36'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:46:36'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:48:56'!
test05AddToExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 29.

testRestInterface add: aCartID withQuantity: 2 to: 'Valid item'.

mockClock addMinutes: 3.

self should: [testRestInterface add: aCartID withQuantity: 2 to: 'Valid item'.] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:49:12'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:49:12'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:49:44' prior: 50785061!
test05AddToExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 3.

self should: [testRestInterface add: aCartID withQuantity: 2 to: 'Valid item'.] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:49:48'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:49:48'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:50:57' prior: 50785085!
test05AddToExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

"mockClock addMinutes: 3.

self should: [testRestInterface add: aCartID withQuantity: 2 to: 'Valid item'.] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] "

! !

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:51:00'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:51:05' prior: 50785109!
test05AddToExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 3.

"self should: [testRestInterface add: aCartID withQuantity: 2 to: 'Valid item'.] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] "

! !

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:51:08'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:51:12' prior: 50785130!
test05AddToExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 3.

self should: [testRestInterface add: aCartID withQuantity: 2 to: 'Valid item'.] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:51:29' prior: 50785151!
test05AddToExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 3.

self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:51:33'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:51:33'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:52:01' prior: 50784467!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	aCart := cartDB at: aCartID ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	
	aCart add: aQuantity of: anItem! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:52:39' prior: 50784960!
listCart: aCartId
	| aCart |
	self checkCartExpiration: aCartId.
	aCart := cartDB at: aCartId ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	^ aCart products.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:53:05'!
checkCartExpiration: aCartId
	| now aCartTime |
	now := clock getTime.
	aCartTime := cartClocks at: aCartId ifAbsent:  [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	now - aCartTime > 30 ifTrue: [
		cartDB removeKey: aCartId.
		cartClocks removeKey: aCartId.
	].! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:53:26' prior: 50785192!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	self checkCartExpiration: aCartID.
	
	aCart := cartDB at: aCartID ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	
	aCart add: aQuantity of: anItem! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 20:54:51' prior: 50785202!
listCart: aCartId
	
	| aCart |
	
	self checkCartExpiration: aCartId.
	
	aCart := cartDB at: aCartId ifAbsent: [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	
	^ aCart products.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 20:54:55'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 20:54:55'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 20:54:55'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 20:54:55'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 20:54:55'!
PASSED!

----SNAPSHOT----(7 November 2019 20:54:58) CuisUniversity-3938.image priorSource: 14506800!

----SNAPSHOT----(7 November 2019 20:59:27) CuisUniversity-3938.image priorSource: 14515509!

----SNAPSHOT----(7 November 2019 20:59:32) CuisUniversity-3938.image priorSource: 14515602!

----SNAPSHOT----(7 November 2019 21:02:00) CuisUniversity-3938.image priorSource: 14515695!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:03:55' prior: 50784789!
createCart
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid item'->10,'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:04:43'!
test06ListCartWithMoreThanOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self assert: (testRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:05:58' prior: 50785284!
test06ListCartWithMoreThanOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

self assert: (testRestInterface listCart: aCartID) size equals: 2! !

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:06:02'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:06:22'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:07:59'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:08:46' prior: 50785273!
createCart
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid item'->10; add: 'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:08:54'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:09:12' prior: 50785297!
test06ListCartWithMoreThanOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

self assert: (testRestInterface listCart: aCartID) size equals: 6! !

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:09:14'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:09:16'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/7/2019 21:09:16'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/7/2019 21:09:16'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/7/2019 21:09:16'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/7/2019 21:09:16'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/7/2019 21:09:16'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/7/2019 21:09:16'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:12:09'!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

self assert: (testRestInterface listCart: aCartID) size equals: 6! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:15:00'!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 4).! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:20:42' prior: 50785377!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

self assert: (testRestInterface checkOutCart: aCartID  with: self defaultCreditCard) equals: 0.! !

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/7/2019 21:20:45'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/7/2019 21:20:55'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/7/2019 21:21:07'!
checkOutCart: aSmallInteger with: aCreditCard 
	self shouldBeImplemented.! !

----SNAPSHOT----(7 November 2019 21:52:02) CuisUniversity-3938.image priorSource: 14515788!

----SNAPSHOT----(7 November 2019 21:52:04) CuisUniversity-3938.image priorSource: 14520460!

----SNAPSHOT----(7 November 2019 21:52:13) CuisUniversity-3938.image priorSource: 14520553!

!methodRemoval: RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/7/2019 21:52:51'!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

self assert: (testRestInterface checkOutCart: aCartID  with: self defaultCreditCard) equals: 0.!

----SNAPSHOT----(7 November 2019 21:53:10) CuisUniversity-3938.image priorSource: 14520646!

----SNAPSHOT----(7 November 2019 21:53:13) CuisUniversity-3938.image priorSource: 14521021!

----QUIT----(7 November 2019 21:53:25) CuisUniversity-3938.image priorSource: 14521114!

----STARTUP---- (11 November 2019 17:01:14) as /media/libre/linux64/CuisUniversity-3938.image!


----QUIT----(11 November 2019 17:01:38) CuisUniversity-3938.image priorSource: 14521207!

----STARTUP---- (11 November 2019 17:06:33) as /media/libre/linux64/CuisUniversity-3938.image!


Object subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'car 11/11/2019 17:38:46'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #MockMerchantProcessor
	instanceVariableNames: 'behavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: #TusLibros stamp: 'car 11/11/2019 17:39:05'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: 'behavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor class methodsFor: 'no messages' stamp: 'car 11/11/2019 17:39:58'!
debitWith: aClosure

	^self new initializeDebitWith: aClosure
	
	! !
!MockMerchantProcessor methodsFor: 'no messages' stamp: 'car 11/11/2019 17:40:40'!
initializeDebitWith: aClosure

	behavior := aClosure 
	
	! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 17:43:47'!
debit
	
	behavior value! !

!methodRemoval: RestInterfaceInternalPart #checkOutCart:with: stamp: 'car 11/11/2019 17:45:54'!
checkOutCart: aSmallInteger with: aCreditCard 
	self shouldBeImplemented.!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:54:44'!
defaultCashierWith: anAction
	| mockMerchantProcessor |

	mockMerchantProcessor := MockMerchantProcessor.	

		^ Cashier with: OrderedCollection new using: self.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:55:26' prior: 50785493!
defaultCashierWith: anAction
	| mockMerchantProcessor |

	mockMerchantProcessor := MockMerchantProcessor initializeDebitWith: anAction.	

	^ Cashier with: OrderedCollection new using: mockMerchantProcessor .! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:55:41' prior: 50783217!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashier.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self deny: (aCashier didSell: 0).
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:56:09' prior: 50785511!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashierWith: MockMerchantProcessor new.
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self deny: (aCashier didSell: 0).
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:56:15' prior: 50782536!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: MockMerchantProcessor new.
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:56:19'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:56:19'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:56:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:56:19'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:56:19'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:56:19'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:56:19'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:56:19'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:56:25'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:56:25'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:56:39' prior: 50785530!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashierWith: [].
		
	self should: [aCashier checkoutWith: (Cart acceptingItemsOf: aCatalogo) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self deny: (aCashier didSell: 0).
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:56:44' prior: 50785550!
test02CheckoutWithCartWithOneItem

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:56:49'!
ERROR!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:56:49'!
ERROR!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:56:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:56:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:56:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:56:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:56:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:56:49'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:56:53'!
ERROR!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:56:53'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:57:12' prior: 50785501!
defaultCashierWith: anAction
	| mockMerchantProcessor |

	mockMerchantProcessor := MockMerchantProcessor debitWith: anAction.	

	^ Cashier with: OrderedCollection new using: mockMerchantProcessor .! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:57:17'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:57:17'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:57:25' prior: 50782553!
test03CheckoutWithValidCreditCard

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:57:29' prior: 50782570!
test04CheckoutWithExpiredCreditCard

	| aCashier aCatalogo aCart dateToCheck |
	aCatalogo := Dictionary new.
	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #December year: 2021).
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:57:32' prior: 50782592!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:57:36' prior: 50782609!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCatalogo aCart |
	aCatalogo := Dictionary new.

	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:57:40' prior: 50784142!
test07CheckoutWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |
	self debitWith: [hasDebit := true].

	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:58:30' prior: 50785781!
test07CheckoutWithOkFromMerchantProcessor

	| aCashier aCatalogo aCart |

	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [hasDebit := true].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:58:44' prior: 50784093!
test08CheckoutWithErrorFromMerchantProcessor

	| aCashier aCatalogo aCart |
	
	self debitWith: [self class error: 'Error'].
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [self class error: 'Error'].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Error'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 17:58:47' prior: 50785821!
test08CheckoutWithErrorFromMerchantProcessor

	| aCashier aCatalogo aCart |
	
	aCatalogo := Dictionary new.	
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.

	aCashier := self defaultCashierWith: [self class error: 'Error'].
	
	aCart := Cart acceptingItemsOf: (aCatalogo).
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Error'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:58:54'!
PASSED!

!methodRemoval: CashierTest #defaultCashier stamp: 'car 11/11/2019 17:58:59'!
defaultCashier		
	
	^ Cashier with: OrderedCollection new using: self.!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:59:02'!
PASSED!

!methodRemoval: CashierTest #debitWith: stamp: 'car 11/11/2019 17:59:08'!
debitWith: anAction
	
	action := anAction!

!methodRemoval: CashierTest #debit stamp: 'car 11/11/2019 17:59:12'!
debit
	
	action value!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:59:14'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:59:14'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: 'hasDebit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'car 11/11/2019 17:59:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'hasDebit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 17:59:30'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 17:59:30'!
PASSED!

----SNAPSHOT----(11 November 2019 17:59:36) CuisUniversity-3938.image priorSource: 14521393!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 17:59:50'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 17:59:50'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 17:59:50'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 17:59:50'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 17:59:50'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 17:59:50'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:04:29'!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
	  raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.].! !

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:05:31'!
ERROR!

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/11/2019 18:08:41'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB clock cartClocks merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:08:38'!
checkoutWith: aCartID and: aCreditCard

	merchantProcessor debitWith: aCartID  and: aCreditCard ! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:09:51'!
linkMerchantProcessor: aMerchantProcessor

	merchantProcessor := aMerchantProcessor 

	! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:12:20' prior: 50786024!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [^ self error : 'Cannot do checkout from an empty cart']).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
	  raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.].! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:12:32' prior: 50786066!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [^ self error : 'Cannot do checkout from an empty cart']).

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
	  raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.].! !

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:13:02'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:13:33' prior: 50786052!
checkoutWith: aCartID and: aCreditCard

	merchantProcessor debit! !

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:13:38'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:14:09' prior: 50786087!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [^ self class error : 'Cannot do checkout from an empty cart']).

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
	  raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.].! !

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:14:12'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:14:20'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:14:20'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:15:35'!
test07CheckoutCartWithOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [^ self class error : 'Cannot do checkout from an empty cart']).

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
	  raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.].! !

!methodRemoval: RestInterfaceInternalPartTest #test07CheckoutEmptyCart stamp: 'car 11/11/2019 18:15:35'!
test07CheckoutEmptyCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [^ self class error : 'Cannot do checkout from an empty cart']).

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
	  raise: Error - MessageNotUnderstood 
	  withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.].!

!classDefinition: #RestInterfaceInternalPartTest category: #TusLibros stamp: 'car 11/11/2019 18:16:55'!
TestCase subclass: #RestInterfaceInternalPartTest
	instanceVariableNames: 'testRestInterface mockClock hasDebit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:16:52' prior: 50786147!
test07CheckoutCartWithOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:18:36' prior: 50786193!
test07CheckoutCartWithOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

testRestInterface checkoutWith: aCartID and: self defaultCreditCard.

self assert: hasDebit.

! !

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 18:18:38'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 18:18:40'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 18:18:40'!
PASSED!

----SNAPSHOT----(11 November 2019 18:19:05) CuisUniversity-3938.image priorSource: 14539176!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:19:17'!
test08CheckoutExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

testRestInterface checkoutWith: aCartID and: self defaultCreditCard.

self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:21:19' prior: 50786252!
test08CheckoutExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: [].

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 3.

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:21:19'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:22:09' prior: 50786267!
test08CheckoutExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

mockClock addMinutes: 29.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 3.

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:22:10'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:22:58' prior: 50786109!
checkoutWith: aCartID and: aCreditCard

	self checkCartExpiration: aCartID.

	merchantProcessor debit! !

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:23:02'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:23:45' prior: 50786289!
test08CheckoutExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 31.

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:23:58'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:23:58'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:26:17' prior: 50785211!
checkCartExpiration: aCartId
	| now aCartTime |
	now := clock getTime.
	aCartTime := cartClocks at: aCartId ifAbsent:  [^ RestInterfaceInternalPart error: 'Cart ID is invalid'].
	now - aCartTime > 30 ifTrue: [
		^ RestInterfaceInternalPart error: 'Cart ID is invalid'
	].! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:26:21'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 18:26:26'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 18:26:26'!
PASSED!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:26:48' prior: 50785224!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	self checkCartExpiration: aCartID.
	
	aCart := cartDB at: aCartID ifAbsent: [].
	
	aCart add: aQuantity of: anItem! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:27:04' prior: 50785235!
listCart: aCartId
	
	| aCart |
	
	self checkCartExpiration: aCartId.
	
	aCart := cartDB at: aCartId ifAbsent: [].
	
	^ aCart products.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 18:27:07'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:27:07'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:31:28'!
test10ListValidClientAndPasswordNoPurchases

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: (testRestInterface listPurchasesFor: aClientId and: aClientPassword size) equals: 0.



! !

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:31:48'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:31:48'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:32:30' prior: 50786463!
test10ListValidClientAndPasswordNoPurchases

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: (testRestInterface listPurchasesFor: aClientId and: aClientPassword size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:32:42' prior: 50786485!
test10ListValidClientAndPasswordNoPurchases

| aClientId aClientPassword |

testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: (testRestInterface listPurchasesFor: aClientId and: aClientPassword size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:32:46' prior: 50786501!
test10ListValidClientAndPasswordNoPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: (testRestInterface listPurchasesFor: aClientId and: aClientPassword size) equals: 0.



! !

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/11/2019 18:33:27'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB clock cartClocks merchantProcessor clientPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:33:25'!
listPurchasesFor: aClientId and: aClientPassword

	^ clientPurchases at: aClientId ifAbsent: [].! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:34:10' prior: 50786541!
listPurchasesFor: aClientId and: aClientPassword

	^ clientPurchases at: aClientId ifAbsent: [OrderedCollection new].! !

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:34:14'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:34:14'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:34:29'!
defaultClientName
	
	^ 'Test Client'! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:34:36'!
defaultClientId
	
	^ 'Test Client ID'! !

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:34:41'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:34:41'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:34:58'!
defaultClientPassword
	
	^ 'Test Client'! !

!methodRemoval: RestInterfaceInternalPartTest #defaultClientName stamp: 'car 11/11/2019 18:34:58'!
defaultClientName
	
	^ 'Test Client'!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:35:05' prior: 50786581!
defaultClientPassword
	
	^ 'Test password'! !

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:35:10'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:35:10'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:35:47' prior: 50784326!
initializeInterface

	cartNumber := 0.
	cartDB := Dictionary new.
	clientPurchases := Dictionary new.! !

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:35:51'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:35:51'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:36:02' prior: 50786517!
test10ListValidClientAndPasswordNoPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 0.



! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 18:36:05'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:36:05'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:36:17'!
test11ListValidClientAndPasswordOnePurchase

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:36:20' prior: 50786665!
test11ListValidClientAndPasswordOnePurchase

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 1.



! !

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:36:23'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:36:23'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:36:36' prior: 50786680!
test11ListValidClientAndPasswordOnePurchase

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).


self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:37:12' prior: 50786703!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := self createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard.



self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:37:16' prior: 50786718!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := self createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 1.



! !

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:37:19'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:37:19'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:37:38' prior: 50786738!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) size) equals: 1.



! !

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:37:42'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:37:42'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:39:07'!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [].
	! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:39:28' prior: 50786794!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [0].
	! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:40:03' prior: 50786805!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [0].
	
	clientPurchasesQty at: aClientId put: clientPurchasesQty + 1.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:40:15' prior: 50786816!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [OrderedCollection new].
	
	clientPurchasesQty at: aClientId put: clientPurchasesQty + 1.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:43:38' prior: 50786829!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [Dictionary new].
	
		
"	clientPurchasesQty at: aClientId put: clientPurchasesQty add: Argument expected ->."! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:46:46' prior: 50786842!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty aCart anItemQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [Dictionary new].
	
	aCart := cartDB at: aCartID ifAbsent: [].
	
	aCart products do: [
		:anItem |
			anItemQty := clientPurchasesQty at: anItem ifAbsent: [0].
			 
	]! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:47:05' prior: 50786856!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty aCart anItemQty |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [Dictionary new].
	
	aCart := cartDB at: aCartID ifAbsent: [].
	
	aCart products do: [
		:anItem |
			anItemQty := clientPurchasesQty at: anItem ifAbsent: [0].
			clientPurchasesQty at: anItem put: anItemQty + 1.
	]! !

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/11/2019 18:52:27'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB clock cartClocks merchantProcessor clientPurchases clientsPurchasesTotals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:52:34' prior: 50786872!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty aCart anItemQty clientPurchasesAmount |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [Dictionary new].

	aCart := cartDB at: aCartID ifAbsent: [].
	
	aCart products do: [
		:anItem |
			anItemQty := clientPurchasesQty at: anItem ifAbsent: [0].
			clientPurchasesQty at: anItem put: anItemQty + 1.
	].

	clientPurchasesAmount := clientsPurchasesTotals at: aClientId ifAbsent: [0].
	clientsPurchasesTotals at: aClientId put: clientPurchasesAmount  + (aCart getProductsTotalCost).! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:53:05' prior: 50786604!
initializeInterface

	cartNumber := 0.
	cartDB := Dictionary new.
	clientPurchases := Dictionary new.
	clientsPurchasesTotals := Dictionary new.	! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:54:08' prior: 50786548!
listPurchasesFor: aClientId and: aClientPassword

	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:54:51' prior: 50786619!
test10ListValidClientAndPasswordNoPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:54:54' prior: 50786766!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 18:54:59'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:55:03'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:55:03'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:55:42' prior: 50786956!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:56:21' prior: 50786989!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:56:23'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:56:23'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:56:32'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:56:32'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:58:34' prior: 50786900!
checkoutWith: aCartID and: aCreditCard and: aClientId

	| clientPurchasesQty aCart anItemQty clientPurchasesAmount |
	
	self checkCartExpiration: aCartID.

	merchantProcessor debit.
	
	clientPurchasesQty := clientPurchases at: aClientId ifAbsent: [Dictionary new].

	aCart := cartDB at: aCartID ifAbsent: [].
	
	aCart products do: [
		:anItem |
			anItemQty := clientPurchasesQty at: anItem ifAbsent: [0].
			clientPurchasesQty at: anItem put: anItemQty + 1.
	].

	clientPurchases at: aClientId put: clientPurchasesQty.

	clientPurchasesAmount := clientsPurchasesTotals at: aClientId ifAbsent: [0].
	clientsPurchasesTotals at: aClientId put: clientPurchasesAmount  + (aCart getProductsTotalCost).! !

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 18:58:43'!
PASSED!

----SNAPSHOT----(11 November 2019 18:58:47) CuisUniversity-3938.image priorSource: 14547124!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:59:23'!
test12ListInvalidClientAndPasswordPurchases

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 18:59:36' prior: 50787079!
test12ListInvalidClientAndPasswordPurchases

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:00:16' prior: 50787100!
test12ListInvalidClientAndPasswordPurchases

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:00:24' prior: 50787117!
test12ListInvalidClientAndPasswordPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientAndPasswordPurchases stamp: 'car 11/11/2019 19:00:27'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientAndPasswordPurchases stamp: 'car 11/11/2019 19:00:27'!
FAILURE!

!methodRemoval: RestInterfaceInternalPart #checkoutWith:and: stamp: 'car 11/11/2019 19:00:41'!
checkoutWith: aCartID and: aCreditCard

	self checkCartExpiration: aCartID.

	merchantProcessor debit!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:01:08' prior: 50786203!
test07CheckoutCartWithOneElement

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:01:19' prior: 50786324!
test08CheckoutExpiredCart

| aCartID |

aCartID := testRestInterface createCart.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

mockClock addMinutes: 31.

self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !

!classDefinition: #RestInterfaceInternalPart category: #TusLibros stamp: 'car 11/11/2019 19:02:35'!
Object subclass: #RestInterfaceInternalPart
	instanceVariableNames: 'cartNumber cartDB clock cartClocks merchantProcessor clientPurchases clientsPurchasesTotals clientDB'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:02:32' prior: 50786933!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: ['']

	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:02:39' prior: 50787218!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [''].

	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:03:10'!
test12ListInvalidClientPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test12ListInvalidClientAndPasswordPurchases stamp: 'car 11/11/2019 19:03:10'!
test12ListInvalidClientAndPasswordPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:04:35' prior: 50787228!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [''].
	
	clientPassword = aClientPassword ifFalse: [^ self class error: 'Client or Password is invalid'].
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:04:41'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:04:41'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:05:07' prior: 50786924!
initializeInterface

	cartNumber := 0.
	cartDB := Dictionary new.
	clientPurchases := Dictionary new.
	clientsPurchasesTotals := Dictionary new.
	clientDB := Dictionary new.
! !

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:05:15'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:05:15'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:05:31' prior: 50787276!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [''].
	
	clientPassword = aClientPassword ifFalse: [^ self class error: 'Client ID or Password is invalid'].
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:05:36'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:05:39'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:05:39'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:05:39'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:05:39'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:06:17' prior: 50786941!
test10ListValidClientAndPasswordNoPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface register: aClientId with: aClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:06:27' prior: 50787010!
test11ListValidClientAndPasswordOnePurchase

| aCartID aClientId aClientPassword |

aCartID := testRestInterface createCart.
aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface register: aClientId with: aClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:06:36' prior: 50787387!
test11ListValidClientAndPasswordOnePurchase

	| aCartID aClientId aClientPassword |

	aCartID := testRestInterface createCart.
	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface register: aClientId with: aClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:07:04'!
register: aClientId with: aPassword

	clientDB at: aClientId put: aPassword.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:07:09'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:07:09'!
PASSED!

----SNAPSHOT----(11 November 2019 19:07:12) CuisUniversity-3938.image priorSource: 14573596!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:07:40'!
test12ListValidClientInvalidPasswordPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test12ListInvalidClientPurchases stamp: 'car 11/11/2019 19:07:40'!
test12ListInvalidClientPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:07:58'!
test13ListInvalidClientPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:08:48' prior: 50784841!
setUp

	mockClock := MockClock create.

	testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:08:53' prior: 50784849!
test01ListEmptyCart

	| aCartID |

	aCartID := testRestInterface createCart.

	self assert: (testRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:08:58' prior: 50784858!
test02ListCartWithOneItem

	| aCartID |

	aCartID := testRestInterface createCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:09:04' prior: 50784869!
test03ListInvalidCart


	self should: [testRestInterface listCart: 80 ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:09:09' prior: 50784880!
test04ListExpiredCart

	| aCartID |

	aCartID := testRestInterface createCart.

	mockClock addMinutes: 31.

	self should: [testRestInterface listCart: aCartID ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:09:17' prior: 50785168!
test05AddToExpiredCart

	| aCartID |

	aCartID := testRestInterface createCart.

	mockClock addMinutes: 29.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 3.

	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:09:24' prior: 50785336!
test06ListCartWithMoreThanOneElement

	| aCartID |

	aCartID := testRestInterface createCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 6! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:09:28' prior: 50787171!
test07CheckoutCartWithOneElement

	| aCartID |

	aCartID := testRestInterface createCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

	self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:09:36' prior: 50787187!
test08CheckoutExpiredCart

	| aCartID |

	aCartID := testRestInterface createCart.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:10:19' prior: 50787482!
test12ListValidClientInvalidPasswordPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.
	
	testRestInterface  register: aClientId with: aClientPassword , 'test'.
	
	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:10:23'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:10:23'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:10:48' prior: 50787519!
test13ListInvalidClientPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface  register: aClientId with: aClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:10:52'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:10:52'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:11:01'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:11:01'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:11:15' prior: 50787313!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [^ self class error: 'Client ID or Password is invalid'].
	
	clientPassword = aClientPassword ifFalse: [^ self class error: 'Client ID or Password is invalid'].
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:11:18'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:11:18'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:11:18'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:11:30' prior: 50787724!
test13ListInvalidClientPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:11:39'!
PASSED!

----SNAPSHOT----(11 November 2019 19:11:56) CuisUniversity-3938.image priorSource: 14586464!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:12:15' prior: 50787760!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [^ self class error: 'Client ID or Password is invalid'].
	
	clientPassword = aClientPassword ifFalse: [^ self class error: 'Client ID or Password is invalid'].
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:12:20'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:12:20'!
PASSED!

----SNAPSHOT----(11 November 2019 19:12:24) CuisUniversity-3938.image priorSource: 14598156!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:12:58'!
test05ListCartWithMoreThanOneElement

	| aCartID |

	aCartID := testRestInterface createCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 6! !

!methodRemoval: RestInterfaceInternalPartTest #test06ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:12:58'!
test06ListCartWithMoreThanOneElement

	| aCartID |

	aCartID := testRestInterface createCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 6!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:13:04'!
test06AddToExpiredCart

	| aCartID |

	aCartID := testRestInterface createCart.

	mockClock addMinutes: 29.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 3.

	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !

!methodRemoval: RestInterfaceInternalPartTest #test05AddToExpiredCart stamp: 'car 11/11/2019 19:13:04'!
test05AddToExpiredCart

	| aCartID |

	aCartID := testRestInterface createCart.

	mockClock addMinutes: 29.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 3.

	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 

!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:16:34'!
test14CreateCartInvalidClient

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: aClientId and: aClientPassword ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Client ID or Password is invalid'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:16:45'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:16:45'!
ERROR!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:17:14'!
createCartWith: aClientId and: aClientPassword
	
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid item'->10; add: 'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:19:00' prior: 50787993!
createCartWith: aClientId and: aClientPassword
	
	| catalog |
	
	clientDB at: aClientId ifAbsent: [^ self class error: 'Invalid Client ID or Password'].
	
	catalog := Dictionary new.
	catalog add: 'Valid item'->10; add: 'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:19:06'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:19:06'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:19:21' prior: 50787968!
test14CreateCartInvalidClient

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: aClientId and: aClientPassword ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:19:26' prior: 50787822!
test13ListInvalidClientPurchases

| aClientId aClientPassword |

aClientId := self defaultClientId.
aClientPassword := self defaultClientPassword.

testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:19:31' prior: 50787659!
test12ListValidClientInvalidPasswordPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.
	
	testRestInterface  register: aClientId with: aClientPassword , 'test'.
	
	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:19:50' prior: 50788006!
createCartWith: aClientId and: aClientPassword
	
	| catalog |
	
	clientDB at: aClientId ifAbsent: [^ self class error: 'Invalid Client ID or Password'].
	
	catalog := Dictionary new.
	catalog add: 'Valid item'->10; add: 'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:20:03' prior: 50787847!
listPurchasesFor: aClientId and: aClientPassword

	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [^ self class error: 'Invalid Client ID or Password'].
	
	clientPassword = aClientPassword ifFalse: [^ self class error: 'Invalid Client ID or Password'].
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:20:09'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:20:55' prior: 50787538!
setUp

	mockClock := MockClock create.

	testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.
	
	testRestInterface register: self defaultClientId with: self defaultClientPassword .! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:21:45' prior: 50787546!
test01ListEmptyCart

	| aCartID |

	aCartID := self defaultCart.

	self assert: (testRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:21:54'!
defaultCart
	
	^ testRestInterface createCartWith: self defaultClientId and: self defaultClientPassword! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:04' prior: 50787555!
test02ListCartWithOneItem

	| aCartID |

		aCartID := self defaultCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:11' prior: 50788149!
test02ListCartWithOneItem

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:18' prior: 50787577!
test04ListExpiredCart

	| aCartID |

	aCartID := self defaultCart.

	mockClock addMinutes: 31.

	self should: [testRestInterface listCart: aCartID ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:22' prior: 50787908!
test05ListCartWithMoreThanOneElement

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 6! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:27' prior: 50787934!
test06AddToExpiredCart

	| aCartID |

	aCartID := self defaultCart.

	mockClock addMinutes: 29.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 3.

	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:31' prior: 50787623!
test07CheckoutCartWithOneElement

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

	self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:36' prior: 50787639!
test08CheckoutExpiredCart

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:45' prior: 50787410!
test11ListValidClientAndPasswordOnePurchase

	| aCartID aClientId aClientPassword |

	aCartID := self defaultCart.
	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface register: aClientId with: aClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:22:54' prior: 50788048!
test13ListInvalidClientPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:23:12' prior: 50787370!
test10ListValidClientAndPasswordNoPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:23:31' prior: 50788292!
test10ListValidClientAndPasswordNoPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: self defaultClientId and: self defaultClientPassword) keys size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:23:46' prior: 50788250!
test11ListValidClientAndPasswordOnePurchase

	| aCartID aClientId aClientPassword |

	aCartID := self defaultCart.
	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.


	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:24:12' prior: 50788273!
test13ListInvalidClientPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: self defaultClientId and: self defaultClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:24:20' prior: 50788340!
test13ListInvalidClientPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: self defaultClientId and: self defaultClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:25:01' prior: 50788029!
test14CreateCartInvalidClient

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: 'Invalid Client' and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:25:04'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:25:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:25:04'!
FAILURE!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:25:29' prior: 50788360!
test13ListInvalidClientPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: 'Invalid Client' and: self defaultClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:25:32'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:25:35'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:25:35'!
PASSED!

----SNAPSHOT----(11 November 2019 19:25:39) CuisUniversity-3938.image priorSource: 14600112!

!methodRemoval: RestInterfaceInternalPart #createCart stamp: 'car 11/11/2019 19:25:47'!
createCart
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Valid item'->10; add: 'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:26:24'!
checkClientInformationWith: aClientId and: aPassword
	! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:26:25' prior: 50788521!
checkClientInformationWith: aClientId and: aPassword
	
	! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:26:59' prior: 50788527!
checkClientInformationWith: aClientId and: aClientPassword
	
	| clientPassword |
	
	clientPassword := clientDB at: aClientId ifAbsent: [^ self class error: 'Invalid Client ID or Password'].
	
	clientPassword = aClientPassword ifFalse: [^ self class error: 'Invalid Client ID or Password'].! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:28:03' prior: 50788105!
listPurchasesFor: aClientId and: aClientPassword

	| |
	
	self checkClientInformationWith: aClientId and: aClientPassword.
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:28:08' prior: 50788546!
listPurchasesFor: aClientId and: aClientPassword
	
	self checkClientInformationWith: aClientId and: aClientPassword.
	^ clientPurchases at: aClientId ifAbsent: [Dictionary new].! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:28:13'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:28:13'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:28:36'!
test14CreateCartInvalidPassword

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: self defaultClientId and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidPassword stamp: 'car 11/11/2019 19:28:40'!
FAILURE!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidPassword stamp: 'car 11/11/2019 19:28:40'!
FAILURE!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:29:10' prior: 50788089!
createCartWith: aClientId and: aClientPassword
	
	| catalog |
	
	self checkClientInformationWith: aClientId  and: aClientPassword.
	
	catalog := Dictionary new.
	catalog add: 'Valid item'->10; add: 'Valid item B'->8.

	cartDB at: cartNumber put: (Cart acceptingItemsOf: catalog).
	cartClocks at: cartNumber put: (clock getTime).	
	^ cartNumber.! !

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidPassword stamp: 'car 11/11/2019 19:29:17'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:29:29'!
test15CreateCartInvalidPassword

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: self defaultClientId and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test14CreateCartInvalidPassword stamp: 'car 11/11/2019 19:29:29'!
test14CreateCartInvalidPassword

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: self defaultClientId and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


!

----SNAPSHOT----(11 November 2019 19:29:32) CuisUniversity-3938.image priorSource: 14619413!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 19:29:51' prior: 50784781!
initializeInterfaceWith: aClock.

	self initializeInterface .
	clock := aClock .
	cartClocks := Dictionary new.! !

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 19:30:00'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidPassword stamp: 'car 11/11/2019 19:30:00'!
PASSED!

----SNAPSHOT----(11 November 2019 19:30:04) CuisUniversity-3938.image priorSource: 14625005!

----SNAPSHOT----(11 November 2019 19:30:06) CuisUniversity-3938.image priorSource: 14626958!

Object subclass: #TestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestFactory category: #TusLibros stamp: 'car 11/11/2019 19:59:31'!
Object subclass: #TestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestFactory methodsFor: 'nil' stamp: 'car 11/11/2019 19:59:54'!
defaultCreditCard
	
	^ CreditCard withName: 'Juan Lopez' andNumber: 1234567891234567 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 4).! !
!TestFactory methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:00:40'!
defaultMerchantProcessorWith: anAction.
	
	^MockMerchantProcessor debitWith: anAction! !
!TestFactory methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:01:16'!
defaultClientId
	
	^ 'Test Client ID'! !
!TestFactory methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:01:28'!
defaultClientPassword
	
	^ 'Test password'! !

!classDefinition: #RestInterfaceInternalPartTest category: #TusLibros stamp: 'car 11/11/2019 20:02:36'!
TestCase subclass: #RestInterfaceInternalPartTest
	instanceVariableNames: 'testRestInterface mockClock hasDebit testFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:02:35' prior: 50788123!
setUp

	mockClock := MockClock create.

	testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.
	
	testRestInterface register: self defaultClientId with: self defaultClientPassword .
	
	testFactory := TestFactory new.! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:03:28' prior: 50788214!
test07CheckoutCartWithOneElement

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: testFactory defaultCreditCard and: testFactory defaultClientId.

	self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:03:34' prior: 50788230!
test08CheckoutExpiredCart

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: testFactory defaultCreditCard and: testFactory defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:03:40' prior: 50788307!
test10ListValidClientAndPasswordNoPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: testFactory defaultClientId and: testFactory defaultClientPassword) keys size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:03:52' prior: 50788841!
test10ListValidClientAndPasswordNoPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: self defaultClientId and: self defaultClientPassword) keys size) equals: 0.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:03:59' prior: 50788821!
test08CheckoutExpiredCart

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:04:06' prior: 50788805!
test07CheckoutCartWithOneElement

	| aCartID |

	aCartID := self defaultCart.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

	self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:04:24' prior: 50788793!
setUp

	mockClock := MockClock create.

	testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.
	
	testRestInterface register: self defaultClientId with: self defaultClientPassword .	! !

TestCase subclass: #RestInterfaceInternalPartTest
	instanceVariableNames: 'testRestInterface mockClock hasDebit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceInternalPartTest category: #TusLibros stamp: 'car 11/11/2019 20:04:30'!
TestCase subclass: #RestInterfaceInternalPartTest
	instanceVariableNames: 'testRestInterface mockClock hasDebit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TestFactory stamp: 'car 11/11/2019 20:04:39'!
Object subclass: #TestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/11/2019 20:04:44'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 20:04:49'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 20:04:53'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidPassword stamp: 'car 11/11/2019 20:04:53'!
PASSED!

----SNAPSHOT----(11 November 2019 20:04:56) CuisUniversity-3938.image priorSource: 14627052!

----SNAPSHOT----(11 November 2019 20:06:42) CuisUniversity-3938.image priorSource: 14636323!

----SNAPSHOT----(11 November 2019 20:06:52) CuisUniversity-3938.image priorSource: 14636417!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:43:16'!
defaultCart! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:43:52' prior: 50789044!
defaultCart

	| aCatalog |
	
	aCatalog := Dictionary new.
	
	aCatalog add: 'itemA'->10; add: 'itemB'->3.
	
	! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:44:02' prior: 50785601!
test01CheckoutWithEmptyCart

	| aCashier aCatalogo |
	aCatalogo := Dictionary new.
	
	aCatalogo add: 'itemA'->10; add: 'itemB'->3.
	aCashier := self defaultCashierWith: [].
		
	self should: [aCashier checkoutWith: (self defaultCart) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self deny: (aCashier didSell: 0).
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:44:16' prior: 50789055!
test01CheckoutWithEmptyCart

	| aCashier |
	
	aCashier := self defaultCashierWith: [].
		
	self should: [aCashier checkoutWith: (self defaultCart) and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Cannot do checkout from an empty cart'.
			self deny: (aCashier didSell: 0).
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:44:24' prior: 50789048!
defaultCart

	| aCatalog |
	
	aCatalog := Dictionary new.
	
	aCatalog add: 'itemA'->10; add: 'itemB'->3.
	
	^ Cart acceptingItemsOf: aCatalog.
	
	! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 20:44:27'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:44:42' prior: 50785620!
test02CheckoutWithCartWithOneItem

	| aCashier aCart |	

	aCashier := self defaultCashierWith: [].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 20:44:44'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:45:01' prior: 50785706!
test03CheckoutWithValidCreditCard

	| aCashier aCart |

	aCashier := self defaultCashierWith: [].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	
	self deny: aCart isEmpty.	

	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 10.  
	
	self assert: aCart isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:45:14' prior: 50785723!
test04CheckoutWithExpiredCreditCard

	| aCashier aCart dateToCheck |

	dateToCheck := FixedGregorianDate fromDate: (Date newDay: 12 month: #December year: 2021).
	
	aCashier := self defaultCashierWith: [].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: dateToCheck]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Credit Card is expired'
		]! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:45:26' prior: 50785745!
test05CheckoutWithValidCreditCardMultipleItems

	| aCashier aCart |

	aCashier := self defaultCashierWith: [].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.  
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:45:39' prior: 50785762!
test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout

	| aCashier aCart |

	aCashier := self defaultCashierWith: [].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.
! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:45:52' prior: 50785801!
test07CheckoutWithOkFromMerchantProcessor

	| aCashier aCart |

	aCashier := self defaultCashierWith: [hasDebit := true].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self assert: (aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)) equals: 13.
	
	self assert: (aCashier didSell: 13).
	
	self assert: aCart isEmpty.

	self assert: hasDebit! !
!CashierTest methodsFor: 'test' stamp: 'car 11/11/2019 20:46:05' prior: 50785846!
test08CheckoutWithErrorFromMerchantProcessor

	| aCashier aCart |

	aCashier := self defaultCashierWith: [self class error: 'Error'].
	
	aCart := self defaultCart.
	
	aCart add: 'itemA'.
	aCart add: 'itemB'.
	
	self should: [aCashier checkoutWith: aCart and: self defaultCreditCard on: (FixedGregorianDate fromDate: Date today)]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [
		:anError | 
			self assert: anError messageText equals: 'Error'.
			self deny: (aCashier didSell: 13).
			self deny: aCart isEmpty.
		].
	
	
	
! !

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 20:46:08'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 20:46:08'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30'!
defaultInterfaceCartId
	
	^ testRestInterface createCartWith: self defaultClientId and: self defaultClientPassword! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788160!
test02ListCartWithOneItem

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 1! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788319!
test11ListValidClientAndPasswordOnePurchase

	| aCartID aClientId aClientPassword |

	aCartID := self defaultInterfaceCartId.
	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.


	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788197!
test06AddToExpiredCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	mockClock addMinutes: 29.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 3.

	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788184!
test05ListCartWithMoreThanOneElement

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface add: 'Valid item B'  withQuantity: 5 to: aCartID.

	self assert: (testRestInterface listCart: aCartID) size equals: 6! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788886!
test07CheckoutCartWithOneElement

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

	self assert: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788171!
test04ListExpiredCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	mockClock addMinutes: 31.

	self should: [testRestInterface listCart: aCartID ] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo:[:anError | 
			self assert: anError messageText equals: 'Cart ID is invalid'.] 

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788134!
test01ListEmptyCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	self assert: (testRestInterface listCart: aCartID) size equals: 0! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:47:30' prior: 50788866!
test08CheckoutExpiredCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !

!methodRemoval: RestInterfaceInternalPartTest #defaultCart stamp: 'car 11/11/2019 20:47:30'!
defaultCart
	
	^ testRestInterface createCartWith: self defaultClientId and: self defaultClientPassword!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 20:47:33'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidPassword stamp: 'car 11/11/2019 20:47:33'!
PASSED!

----SNAPSHOT----(11 November 2019 20:47:36) CuisUniversity-3938.image priorSource: 14636511!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:50:14'!
test09CheckoutExpiredCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



! !

!methodRemoval: RestInterfaceInternalPartTest #test08CheckoutExpiredCart stamp: 'car 11/11/2019 20:50:14'!
test08CheckoutExpiredCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.] 



!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:50:29'!
test08CheckoutCartWithOneElement

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

	self assert: hasDebit.

! !

!methodRemoval: RestInterfaceInternalPartTest #test07CheckoutCartWithOneElement stamp: 'car 11/11/2019 20:50:29'!
test07CheckoutCartWithOneElement

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: self defaultClientId.

	self assert: hasDebit.

!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:51:33'!
test07AddToInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).

	testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId.

	self deny: hasDebit.

! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:52:36' prior: 50789507!
test07AddToInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).
	
	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				]
! !

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 20:52:39'!
ERROR!

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 20:52:39'!
ERROR!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:52:57' prior: 50788902!
setUp

	mockClock := MockClock create.

	testRestInterface := RestInterfaceInternalPart createInterfaceWith: mockClock.
	
	testRestInterface register: self defaultClientId with: self defaultClientPassword.
	
	hasDebit := false.! !

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 20:53:04'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:53:52' prior: 50789519!
test07AddToInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).
	
	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: 'Invalid Cart'.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				]
! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:53:58' prior: 50789558!
test07AddToInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: [hasDebit := true]).
	
	self should: [testRestInterface add: 'Valid item'  withQuantity: 1 to: 'Invalid Cart'.] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.				
				]
! !

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 20:54:03'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutCartWithOneElement stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test09CheckoutExpiredCart stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 20:54:44'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidPassword stamp: 'car 11/11/2019 20:54:44'!
PASSED!

----SNAPSHOT----(11 November 2019 20:54:48) CuisUniversity-3938.image priorSource: 14649004!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:56:33'!
test09CheckoutInvalidCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	mockClock addMinutes: 31.

	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:56:37' prior: 50789650!
test09CheckoutInvalidCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.	

	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:56:41' prior: 50789672!
test09CheckoutInvalidCart

	| aCartID |

	aCartID := self defaultInterfaceCartId.

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				] 



! !
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:56:47' prior: 50789693!
test09CheckoutInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				] 



! !

!testRun: #RestInterfaceInternalPartTest #test09CheckoutInvalidCart stamp: 'car 11/11/2019 20:56:50'!
PASSED!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:02'!
test16CreateCartInvalidPassword

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: self defaultClientId and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test15CreateCartInvalidPassword stamp: 'car 11/11/2019 20:57:02'!
test15CreateCartInvalidPassword

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: self defaultClientId and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:22'!
test15CreateCartInvalidClient

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: 'Invalid Client' and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test14CreateCartInvalidClient stamp: 'car 11/11/2019 20:57:22'!
test14CreateCartInvalidClient

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).	

	self should: [testRestInterface createCartWith: 'Invalid Client' and: 'Any password'] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:36'!
test14ListInvalidClientPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: 'Invalid Client' and: self defaultClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test13ListInvalidClientPurchases stamp: 'car 11/11/2019 20:57:36'!
test13ListInvalidClientPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: 'Invalid Client' and: self defaultClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:42'!
test13ListValidClientInvalidPasswordPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.
	
	testRestInterface  register: aClientId with: aClientPassword , 'test'.
	
	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


! !

!methodRemoval: RestInterfaceInternalPartTest #test12ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 20:57:42'!
test12ListValidClientInvalidPasswordPurchases

	| aClientId aClientPassword |

	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.
	
	testRestInterface  register: aClientId with: aClientPassword , 'test'.
	
	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface listPurchasesFor: aClientId and: aClientPassword] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Invalid Client ID or Password'.] 


!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:47'!
test12ListValidClientAndPasswordOnePurchase

	| aCartID aClientId aClientPassword |

	aCartID := self defaultInterfaceCartId.
	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.


	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



! !

!methodRemoval: RestInterfaceInternalPartTest #test11ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 20:57:47'!
test11ListValidClientAndPasswordOnePurchase

	| aCartID aClientId aClientPassword |

	aCartID := self defaultInterfaceCartId.
	aClientId := self defaultClientId.
	aClientPassword := self defaultClientPassword.


	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	testRestInterface add: 'Valid item'  withQuantity: 1 to: aCartID.

	testRestInterface checkoutWith: aCartID and: self defaultCreditCard and: aClientId.

	self assert: ((testRestInterface listPurchasesFor: aClientId and: aClientPassword) keys size) equals: 1.



!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:53'!
test11ListValidClientAndPasswordNoPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: self defaultClientId and: self defaultClientPassword) keys size) equals: 0.



! !

!methodRemoval: RestInterfaceInternalPartTest #test10ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 20:57:53'!
test10ListValidClientAndPasswordNoPurchases

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self assert: ((testRestInterface listPurchasesFor: self defaultClientId and: self defaultClientPassword) keys size) equals: 0.



!
!RestInterfaceInternalPartTest methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 20:57:58'!
test10CheckoutInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				] 



! !

!methodRemoval: RestInterfaceInternalPartTest #test09CheckoutInvalidCart stamp: 'car 11/11/2019 20:57:58'!
test09CheckoutInvalidCart

	testRestInterface linkMerchantProcessor: (MockMerchantProcessor debitWith: []).

	self should: [testRestInterface checkoutWith: 'Invalid cart' and: self defaultCreditCard and: self defaultClientId ] 
			raise:  Error - MessageNotUnderstood 
			withExceptionDo:[:anError | 
				self assert: anError messageText equals: 'Cart ID is invalid'.
				self deny: hasDebit.
				] 



!

----SNAPSHOT----(11 November 2019 20:58:01) CuisUniversity-3938.image priorSource: 14655842!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutCartWithOneElement stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test09CheckoutExpiredCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10CheckoutInvalidCart stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14ListInvalidClientPurchases stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidClient stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test16CreateCartInvalidPassword stamp: 'car 11/11/2019 20:58:04'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 20:58:08'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/11/2019 20:58:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/11/2019 20:58:11'!
PASSED!

----SNAPSHOT----(11 November 2019 20:58:13) CuisUniversity-3938.image priorSource: 14666039!

----SNAPSHOT----(11 November 2019 20:58:15) CuisUniversity-3938.image priorSource: 14669675!

----SNAPSHOT----(11 November 2019 20:58:18) CuisUniversity-3938.image priorSource: 14669769!

----SNAPSHOT----(11 November 2019 20:59:12) CuisUniversity-3938.image priorSource: 14669863!

----SNAPSHOT----(11 November 2019 20:59:52) CuisUniversity-3938.image priorSource: 14669957!
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 21:00:20' prior: 50786417!
add: anItem  withQuantity: aQuantity to: aCartID

	|aCart |
	
	self checkCartExpiration: aCartID.
	
	aCart := cartDB at: aCartID.
	
	aCart add: aQuantity of: anItem! !
!RestInterfaceInternalPart methodsFor: 'as yet unclassified' stamp: 'car 11/11/2019 21:01:19' prior: 50788686!
initializeInterfaceWith: aClock.

	cartNumber := 0.
	cartDB := Dictionary new.
	clientPurchases := Dictionary new.
	clientsPurchasesTotals := Dictionary new.
	clientDB := Dictionary new.
	clock := aClock .
	cartClocks := Dictionary new.! !

!methodRemoval: RestInterfaceInternalPart #initializeInterface stamp: 'car 11/11/2019 21:01:25'!
initializeInterface

	cartNumber := 0.
	cartDB := Dictionary new.
	clientPurchases := Dictionary new.
	clientsPurchasesTotals := Dictionary new.
	clientDB := Dictionary new.
!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutCartWithOneElement stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test09CheckoutExpiredCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10CheckoutInvalidCart stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14ListInvalidClientPurchases stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidClient stamp: 'car 11/11/2019 21:01:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test16CreateCartInvalidPassword stamp: 'car 11/11/2019 21:01:27'!
PASSED!

----SNAPSHOT----(11 November 2019 21:01:30) CuisUniversity-3938.image priorSource: 14670051!

!methodRemoval: Cashier #initializeWith: stamp: 'car 11/11/2019 21:02:03'!
initializeWith: aSalesBook

	salesBook := aSalesBook.!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 21:02:07'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 21:02:07'!
PASSED!

----SNAPSHOT----(11 November 2019 21:02:10) CuisUniversity-3938.image priorSource: 14672920!

----SNAPSHOT----(11 November 2019 21:02:22) CuisUniversity-3938.image priorSource: 14674013!

----SNAPSHOT----(11 November 2019 21:02:31) CuisUniversity-3938.image priorSource: 14674107!

!methodRemoval: RestInterfaceInternalPart class #createInterface stamp: 'car 11/11/2019 21:14:16'!
createInterface

	^ self new initializeInterface.!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test01CheckoutWithEmptyCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test02CheckoutWithCartWithOneItem stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test03CheckoutWithValidCreditCard stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCard stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithValidCreditCardMultipleItems stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithValidCreditCardMultipleItemsAndRegisterCheckout stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test07CheckoutWithOkFromMerchantProcessor stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #CashierTest #test08CheckoutWithErrorFromMerchantProcessor stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test01ListEmptyCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test02ListCartWithOneItem stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test03ListInvalidCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test04ListExpiredCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test05ListCartWithMoreThanOneElement stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test06AddToExpiredCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test07AddToInvalidCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test08CheckoutCartWithOneElement stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test09CheckoutExpiredCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test10CheckoutInvalidCart stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test11ListValidClientAndPasswordNoPurchases stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test12ListValidClientAndPasswordOnePurchase stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test13ListValidClientInvalidPasswordPurchases stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test14ListInvalidClientPurchases stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test15CreateCartInvalidClient stamp: 'car 11/11/2019 21:14:27'!
PASSED!

!testRun: #RestInterfaceInternalPartTest #test16CreateCartInvalidPassword stamp: 'car 11/11/2019 21:14:27'!
PASSED!

----SNAPSHOT----(11 November 2019 21:14:32) CuisUniversity-3938.image priorSource: 14674201!

----SNAPSHOT----(11 November 2019 21:14:34) CuisUniversity-3938.image priorSource: 14678095!

----STARTUP---- (14 November 2019 21:48:13) as /media/libre/linux64/CuisUniversity-3958.image!


----End fileIn of /media/libre/linux64/StringServer.st----!

----End fileIn of /media/libre/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /media/libre/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /media/libre/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /media/libre/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /media/libre/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /media/libre/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /media/libre/linux64/Packages/Features/WebClient.pck.st----!

----SNAPSHOT----(14 November 2019 21:50:18) CuisUniversity-3958.image priorSource: 14678189!

----SNAPSHOT----(14 November 2019 21:50:20) CuisUniversity-3958.image priorSource: 15903782!

----SNAPSHOT----(14 November 2019 21:50:23) CuisUniversity-3958.image priorSource: 15903876!